// Level 4: Asymmetric Encryption Constants
// Private key used at compile-time ONLY - not stored in binary!
// This file is auto-generated by ConstantObfuscator at compile time
// DO NOT EDIT MANUALLY - Changes will be overwritten

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace HardToModifyRuntimeConstants;

public static class CryptoConstants
{
    private readonly struct EncryptedContainer()
    {
            public static readonly byte[] Pi = new byte[]
            {
                0x23, 0xD3, 0x59, 0xB1, 0xEF, 0x50, 0x71, 0x96, 0x9F, 0x18, 0x16, 0x48, 0x56, 0x94, 0xEE, 0x87, 
            0x25, 0x2D, 0x8A, 0x37, 0x6C, 0x37, 0x7E, 0x8E, 0xC0, 0xE2, 0x56, 0x75, 0xCB, 0xBF, 0x96, 0xDD, 
            0xD2, 0x74, 0x31, 0xFE, 0xFE, 0x87, 0x49, 0xE8, 0x29, 0x5A, 0xF6, 0x39, 0xCB, 0x4D, 0xF7, 0x8D, 
            0xFC, 0x2C, 0x31, 0x19, 0xD2, 0x2A, 0x13, 0x28, 0x0A, 0xEA, 0x88, 0x58, 0xE2, 0xF8, 0x07, 0x5F, 
            0x2D, 0xAC, 0x5E, 0xEC, 0x14, 0x72, 0xAB, 0xAF, 0x1B, 0xA8, 0x34, 0xD6, 0x64, 0x40, 0xA5, 0x87, 
            0xF9, 0x0E, 0xB4, 0xFA, 0xA3, 0x21, 0xE4, 0x6C, 0xE7, 0x4F, 0xC4, 0x53, 0xB5, 0x56, 0x27, 0x60, 
            0xD0, 0x75, 0xC9, 0x22, 0x13, 0x99, 0xB3, 0x77, 0x05, 0x6A, 0xB3, 0xEC, 0x60, 0x73, 0x87, 0x09, 
            0x22, 0x61, 0xB1, 0x4F, 0x90, 0x59, 0xDD, 0x12, 0x6D, 0xEF, 0x6A, 0x58, 0xD8, 0x45, 0x8B, 0x57, 
            0xB2, 0xCF, 0x5C, 0xE9, 0x56, 0x87, 0x7C, 0x4E, 0x8A, 0xC5, 0xD3, 0xF1, 0x84, 0xE0, 0x73, 0xB1, 
            0xA7, 0x72, 0x65, 0xB7, 0x03, 0xAD, 0x25, 0x15, 0xCA, 0xBE, 0x16, 0x92, 0xFA, 0x2E, 0xE8, 0xDF, 
            0xB6, 0xA2, 0x4F, 0x69, 0x43, 0xE2, 0x8D, 0xEC, 0xB5, 0x5F, 0xEA, 0x0E, 0x5F, 0xF7, 0xBE, 0x40, 
            0x14, 0x50, 0xE8, 0xE8, 0x25, 0x56, 0x73, 0x9A, 0xB7, 0xC3, 0xA8, 0x3E, 0x9A, 0x3D, 0x66, 0xC8, 
            0x95, 0x90, 0x6E, 0x2B, 0xD9, 0x68, 0xC0, 0x65, 0x4B, 0x81, 0x0A, 0x47, 0x1F, 0x88, 0x6F, 0x51, 
            0xC1, 0x05, 0x8F, 0xFB, 0x12, 0x18, 0x4B, 0xAB, 0xAE, 0x02, 0x9E, 0xAC, 0x81, 0x8E, 0x45, 0xE4, 
            0xB7, 0xCB, 0x50, 0x21, 0x5E, 0x0B, 0xB6, 0xC2, 0x8D, 0x29, 0x77, 0x0E, 0x1B, 0xE0, 0x17, 0x7F, 
            0xEA, 0xAC, 0x18, 0x2E, 0x8F, 0x90, 0x1D, 0x19, 0xB0, 0xFB, 0x94, 0xAD, 0x61, 0x17, 0xA3, 0x9C
            };
            public static readonly byte[] E = new byte[]
            {
                0xC6, 0xA7, 0x3C, 0x47, 0xEC, 0x26, 0xDD, 0x41, 0x5D, 0xA3, 0xAA, 0xAA, 0xAC, 0x65, 0x13, 0x27, 
            0xF1, 0xEA, 0xB0, 0xC7, 0xB4, 0x1E, 0xBD, 0x09, 0x77, 0xEE, 0x61, 0x26, 0x0D, 0xE5, 0xC1, 0x17, 
            0x26, 0x05, 0xDB, 0x42, 0x35, 0x61, 0xD1, 0xE0, 0xAD, 0xCF, 0xCE, 0x28, 0x3B, 0xA3, 0x34, 0x44, 
            0x46, 0x4C, 0x4D, 0xBB, 0x71, 0x49, 0x71, 0x1D, 0x98, 0x37, 0x8E, 0xE3, 0x53, 0xE5, 0x98, 0x83, 
            0xC0, 0xAA, 0x62, 0x70, 0x65, 0xC9, 0xEB, 0xAE, 0x1A, 0xBB, 0x68, 0x4B, 0xBE, 0xA1, 0xB9, 0x06, 
            0x1A, 0x58, 0x27, 0x1F, 0xDC, 0x91, 0x14, 0x2A, 0x07, 0xD4, 0x87, 0xA2, 0x34, 0x67, 0x2D, 0x9D, 
            0x2C, 0xA1, 0x2F, 0x87, 0xAB, 0x45, 0x2F, 0xB8, 0x68, 0xF8, 0x67, 0xAC, 0xF2, 0x16, 0x48, 0x36, 
            0xFE, 0xE2, 0x6B, 0xF8, 0xEB, 0x40, 0xBC, 0x8F, 0xEF, 0x1C, 0xC7, 0x79, 0x12, 0x20, 0x28, 0xA9, 
            0x72, 0x31, 0xF7, 0x83, 0xBB, 0x11, 0x85, 0x94, 0x46, 0xB4, 0x49, 0x22, 0x83, 0x1F, 0x94, 0x79, 
            0xED, 0xF8, 0x0E, 0x25, 0x53, 0xE6, 0xEA, 0xAD, 0x4C, 0x5E, 0x86, 0xBD, 0x30, 0x99, 0xAC, 0xE8, 
            0x95, 0x70, 0xE7, 0xEB, 0x13, 0xED, 0xDA, 0x59, 0x36, 0x17, 0x48, 0xE8, 0x46, 0xAF, 0xC5, 0xE0, 
            0x93, 0x05, 0x30, 0xDC, 0x52, 0x15, 0x99, 0x68, 0x92, 0xA8, 0x2C, 0x20, 0xF7, 0xDC, 0x75, 0xD1, 
            0x91, 0x8B, 0xD8, 0x1F, 0x41, 0xC6, 0x6E, 0x1D, 0x59, 0x39, 0xEB, 0x0D, 0x03, 0xFD, 0x34, 0x8C, 
            0x1A, 0x90, 0x7F, 0xD6, 0x28, 0x20, 0x79, 0x8F, 0x4D, 0x7B, 0x8B, 0x75, 0x62, 0x32, 0x4C, 0x7E, 
            0x31, 0xA2, 0x0B, 0xDD, 0xAC, 0x45, 0x0A, 0x02, 0xA7, 0x84, 0xC8, 0x0E, 0xAC, 0x0F, 0xAF, 0xC5, 
            0x35, 0x72, 0x65, 0x41, 0xE0, 0xE4, 0x0E, 0x01, 0x63, 0x3B, 0x73, 0xCB, 0x5D, 0x97, 0xF7, 0xE4
            };
            public static readonly byte[] Sqrt2 = new byte[]
            {
                0xC0, 0xF1, 0xDB, 0xCA, 0x79, 0xB9, 0x54, 0xBD, 0x55, 0xBD, 0x18, 0x25, 0xA8, 0xDC, 0x66, 0xAA, 
            0xF1, 0x89, 0xD3, 0x10, 0xE7, 0xDA, 0xC8, 0x01, 0x8F, 0xAB, 0x41, 0x10, 0x49, 0xBF, 0x72, 0x59, 
            0x3F, 0xE1, 0xD8, 0xF3, 0x68, 0xDB, 0xAF, 0x6E, 0xEA, 0xE3, 0x3C, 0x4E, 0xCB, 0xC0, 0xDE, 0x81, 
            0x7B, 0xB9, 0xBE, 0xDC, 0x2B, 0xD8, 0x82, 0x5F, 0xA7, 0x3D, 0xA3, 0x84, 0x16, 0x77, 0x10, 0xED, 
            0xD4, 0x00, 0xB6, 0x2A, 0xED, 0x71, 0x9C, 0xC9, 0xBC, 0xD5, 0x30, 0xF8, 0x44, 0x0C, 0x96, 0x49, 
            0x6B, 0x73, 0x87, 0x3B, 0x22, 0xB8, 0x83, 0x36, 0xA3, 0xF0, 0x06, 0x3E, 0x48, 0x5F, 0xD7, 0x84, 
            0xA6, 0xAD, 0xA9, 0x96, 0xDF, 0x53, 0x53, 0xB3, 0xB1, 0x7B, 0xBA, 0x64, 0x1F, 0xAB, 0x0E, 0xE5, 
            0x5C, 0xBA, 0x54, 0x77, 0xA2, 0x94, 0x3A, 0xF8, 0x8B, 0x12, 0x42, 0xF9, 0xF8, 0xB4, 0x42, 0x9D, 
            0x37, 0xBC, 0xC1, 0x5F, 0xB7, 0xBD, 0xE1, 0xF9, 0x95, 0x68, 0xE3, 0x68, 0x0D, 0xAA, 0x12, 0x65, 
            0xBF, 0x2E, 0x8A, 0x72, 0x39, 0x55, 0x83, 0xE4, 0xBC, 0x2C, 0x44, 0x21, 0xC5, 0xE8, 0x0B, 0x1A, 
            0xB9, 0xAA, 0x71, 0xD5, 0xB4, 0xF5, 0xAA, 0x79, 0x1E, 0x0C, 0x71, 0xE4, 0x90, 0xCD, 0x96, 0x24, 
            0x58, 0xD8, 0xAE, 0x08, 0x17, 0x0D, 0x0A, 0x28, 0x72, 0x02, 0x96, 0x71, 0x42, 0x03, 0x25, 0x35, 
            0xAB, 0x26, 0x05, 0x25, 0x84, 0x95, 0xFC, 0xE4, 0x4D, 0x07, 0x64, 0x92, 0x1E, 0xB0, 0x72, 0x80, 
            0x7C, 0x36, 0x26, 0x42, 0x1B, 0x19, 0x25, 0x63, 0xB6, 0x6D, 0xE4, 0x4C, 0xFF, 0xE9, 0xAC, 0xC6, 
            0x69, 0x15, 0x38, 0xA5, 0x18, 0xDD, 0x2A, 0x0E, 0xFF, 0x6F, 0xC5, 0x69, 0xCF, 0xA6, 0x90, 0x8A, 
            0x15, 0x1E, 0xB2, 0x31, 0x13, 0xE9, 0x41, 0x3B, 0x41, 0x16, 0x78, 0xA1, 0xB2, 0x53, 0xAF, 0xDB
            };
            public static readonly byte[] GoldenRatio = new byte[]
            {
                0x62, 0xAD, 0xBE, 0x0E, 0x8C, 0x23, 0x7A, 0x13, 0xFB, 0xE0, 0x35, 0xD8, 0x0C, 0x7D, 0x2F, 0x01, 
            0x81, 0x10, 0x33, 0xC2, 0x4E, 0xD9, 0xEF, 0xFD, 0x35, 0xAF, 0x72, 0xC5, 0x74, 0x96, 0x4C, 0x2D, 
            0xC6, 0xC2, 0xAF, 0x6B, 0xBE, 0xA2, 0x9B, 0x13, 0xB5, 0xCA, 0x8D, 0x2C, 0xEB, 0xBD, 0x53, 0x17, 
            0x66, 0xE9, 0xAD, 0x21, 0xEE, 0x82, 0xBE, 0xB9, 0x63, 0x47, 0x21, 0xD9, 0xF0, 0x63, 0x8A, 0x17, 
            0x4D, 0x98, 0x4E, 0xBD, 0x33, 0x54, 0x9F, 0xD2, 0xA0, 0xFA, 0x75, 0x37, 0x71, 0x6D, 0x91, 0xEB, 
            0x82, 0xD5, 0xEF, 0x2D, 0x6D, 0xBB, 0x9F, 0x5E, 0x37, 0x18, 0x28, 0x64, 0x6D, 0x66, 0x7A, 0x17, 
            0xBC, 0x99, 0x18, 0x96, 0x2A, 0x71, 0x99, 0xEC, 0xAF, 0xCB, 0x5E, 0xC7, 0x84, 0x4E, 0x50, 0xB5, 
            0x35, 0x53, 0x64, 0x37, 0xF0, 0x90, 0x0D, 0x37, 0x68, 0xFD, 0x0B, 0xC7, 0x2F, 0x40, 0x84, 0xAC, 
            0xB4, 0xD0, 0xF0, 0x23, 0xEF, 0x57, 0x81, 0x62, 0xCA, 0x96, 0xB5, 0xED, 0xC5, 0xA3, 0x9B, 0xCF, 
            0x88, 0x40, 0x4C, 0xC9, 0x91, 0xC0, 0xC6, 0x7E, 0x8F, 0x4C, 0xC9, 0xDA, 0xD1, 0xD6, 0xDA, 0x08, 
            0x20, 0x8A, 0x59, 0x6E, 0xA7, 0xB2, 0xEA, 0x4C, 0xA1, 0x91, 0x54, 0xA9, 0x94, 0x80, 0xD8, 0x28, 
            0x3E, 0xCA, 0x0F, 0x2A, 0x52, 0x74, 0x27, 0x42, 0xE1, 0xA4, 0x27, 0x23, 0xD7, 0x49, 0x5B, 0xFC, 
            0xEE, 0x01, 0xFA, 0xBE, 0x32, 0xD7, 0x9D, 0xCF, 0xFF, 0x29, 0xA9, 0xD0, 0xB9, 0xC8, 0xBA, 0xF5, 
            0xCD, 0x0E, 0xEB, 0x93, 0x2C, 0x9C, 0x5E, 0x72, 0x96, 0xDC, 0x88, 0xF2, 0x88, 0xC2, 0x29, 0xFA, 
            0x0E, 0x92, 0x5B, 0xE0, 0x82, 0x3F, 0x96, 0xA1, 0x26, 0x1D, 0x11, 0x2C, 0x70, 0xCA, 0xE9, 0xB9, 
            0xAB, 0x1F, 0x1B, 0xB0, 0xAD, 0x29, 0xF1, 0x75, 0xD9, 0xD0, 0x46, 0x71, 0xDF, 0x46, 0x2F, 0xBA
            };
            public static readonly byte[] MaxInt32 = new byte[]
            {
                0xCE, 0xE7, 0xA4, 0x60, 0x6A, 0x80, 0x72, 0x43, 0x2A, 0xD2, 0x73, 0x11, 0x00, 0xA1, 0x8C, 0x5C, 
            0x7E, 0x91, 0xDD, 0x8A, 0xA3, 0xEC, 0x02, 0x76, 0xCE, 0x66, 0x3D, 0x5E, 0xC4, 0xD3, 0xF3, 0x5B, 
            0xBC, 0xE0, 0x44, 0x6F, 0x48, 0x2B, 0x96, 0x04, 0x3F, 0x64, 0xEE, 0xE9, 0x77, 0xEF, 0x22, 0x69, 
            0x61, 0xAB, 0xBA, 0xAF, 0x53, 0x96, 0x26, 0xA6, 0xE3, 0x30, 0x94, 0x08, 0xBD, 0xFA, 0x0B, 0x07, 
            0x32, 0x3D, 0xA9, 0x74, 0x02, 0x2C, 0xA9, 0x96, 0x70, 0x2F, 0xA3, 0xAB, 0x2C, 0x9B, 0x2D, 0x78, 
            0x13, 0xAC, 0xF2, 0x48, 0x03, 0x3C, 0xD1, 0x0A, 0xE3, 0x3E, 0x53, 0xC7, 0xB8, 0x56, 0x1A, 0x85, 
            0x86, 0x37, 0x04, 0xCC, 0x9A, 0xCC, 0xC5, 0x5A, 0xD9, 0x6B, 0x9A, 0x72, 0xF7, 0x18, 0x14, 0xFC, 
            0x1C, 0xE2, 0xA4, 0x3F, 0xD3, 0x67, 0xD9, 0x4B, 0x47, 0xB4, 0x53, 0xA6, 0xD0, 0x09, 0x6C, 0x69, 
            0xBB, 0xDB, 0xAB, 0x35, 0x49, 0x3B, 0x91, 0x6D, 0xD3, 0x5E, 0x64, 0x48, 0xD6, 0xAC, 0x65, 0x3A, 
            0x7B, 0x73, 0x95, 0x28, 0x73, 0x10, 0x22, 0x5F, 0xF2, 0x01, 0xD8, 0x95, 0x1D, 0xF9, 0x31, 0x4E, 
            0x4D, 0x63, 0xE2, 0x92, 0xEB, 0xD2, 0x2E, 0x5F, 0x15, 0x87, 0x1A, 0xBA, 0x4B, 0xA9, 0x9B, 0x1C, 
            0x66, 0xAD, 0x82, 0x3C, 0x2D, 0x8D, 0xFC, 0xB6, 0xCF, 0x74, 0xD9, 0x9F, 0x1D, 0x84, 0xE2, 0xF4, 
            0xB7, 0xE4, 0xFA, 0x5A, 0x95, 0x1E, 0xFE, 0x41, 0x2B, 0xE9, 0xF0, 0x94, 0x23, 0x48, 0xF8, 0x87, 
            0xA4, 0x2E, 0xB7, 0xD2, 0x0B, 0x40, 0xB5, 0x82, 0x36, 0xA7, 0x8C, 0x24, 0xD8, 0xB3, 0xEA, 0xC9, 
            0x17, 0xF1, 0x49, 0x67, 0xDA, 0xBB, 0xE5, 0xD0, 0x15, 0x61, 0x39, 0xEE, 0x39, 0xB6, 0xBB, 0x97, 
            0x5F, 0xBA, 0x1C, 0x82, 0x99, 0x95, 0x9E, 0x3E, 0x0B, 0xD8, 0xB9, 0x0D, 0xFD, 0xED, 0x2F, 0x3A
            };
            public static readonly byte[] Answer = new byte[]
            {
                0xB9, 0x7A, 0x9E, 0x12, 0x4E, 0x53, 0xAD, 0x22, 0xAE, 0xC6, 0x19, 0xB8, 0x30, 0x66, 0xE0, 0xDE, 
            0x86, 0xE6, 0x2E, 0x89, 0x60, 0x68, 0x1F, 0x0A, 0xF8, 0x19, 0xD5, 0x1C, 0xC1, 0x94, 0xC1, 0xAF, 
            0x6F, 0x88, 0x9E, 0xB5, 0x52, 0xA1, 0xE7, 0xA9, 0x45, 0x26, 0x92, 0xF0, 0xF8, 0x65, 0xEE, 0x24, 
            0x8B, 0x4D, 0xBA, 0x7C, 0xAD, 0xDD, 0x5C, 0x19, 0x0D, 0x47, 0xC2, 0xB0, 0x96, 0x55, 0x79, 0x2E, 
            0x89, 0x58, 0x11, 0x9A, 0xBE, 0x5E, 0x87, 0x8A, 0x61, 0xBE, 0xB5, 0x63, 0xAA, 0x2F, 0x2B, 0x17, 
            0x81, 0x03, 0x8B, 0xD4, 0xAF, 0xE1, 0x05, 0xF7, 0x23, 0x8A, 0x2E, 0x13, 0x1C, 0x15, 0x5A, 0xCA, 
            0x60, 0xC2, 0xFD, 0xD5, 0x4A, 0x70, 0xE8, 0xC9, 0x0C, 0x10, 0x4B, 0xE1, 0x40, 0x32, 0x34, 0xE0, 
            0x4C, 0x41, 0xD2, 0x20, 0xBD, 0x54, 0x22, 0x46, 0x18, 0x32, 0x55, 0xF9, 0x45, 0xA1, 0xDC, 0x5E, 
            0x48, 0x0D, 0x96, 0x72, 0x77, 0x4F, 0x02, 0xEA, 0xCE, 0x74, 0x6A, 0xD0, 0xBC, 0x00, 0x62, 0x53, 
            0xDB, 0x53, 0x58, 0x57, 0xA0, 0x0F, 0x07, 0xEE, 0x8A, 0xC9, 0x07, 0x91, 0x21, 0x47, 0xD7, 0x92, 
            0xC2, 0xE4, 0x12, 0x21, 0x35, 0x25, 0x23, 0x05, 0xF0, 0x86, 0x78, 0x3F, 0x2E, 0xE5, 0x00, 0xCE, 
            0x3F, 0xE4, 0x02, 0x8A, 0xDE, 0xF5, 0x3D, 0x0E, 0x46, 0xE2, 0x59, 0x4E, 0xFB, 0xF2, 0xF0, 0x64, 
            0x17, 0x03, 0xA7, 0xB7, 0xE0, 0xF2, 0x0F, 0xFE, 0xC7, 0x62, 0x76, 0x85, 0x5F, 0x64, 0x00, 0x34, 
            0xFD, 0x27, 0xA9, 0xFB, 0xEA, 0xCE, 0x00, 0xF6, 0x60, 0xEC, 0xAA, 0x77, 0xEF, 0x8F, 0xED, 0x8C, 
            0x57, 0xA8, 0x9F, 0xB6, 0x6F, 0xF0, 0x00, 0xDF, 0x2F, 0x4F, 0xFB, 0xBD, 0x4E, 0xB1, 0x30, 0xF8, 
            0x15, 0xBB, 0x0A, 0xCD, 0x50, 0x4A, 0x50, 0xE4, 0xAC, 0x31, 0xB1, 0xD6, 0x79, 0xB5, 0x8F, 0x09
            };
            public static readonly byte[] PiDecimal = new byte[]
            {
                0xC3, 0x11, 0x56, 0xED, 0x88, 0x4F, 0xF0, 0x5B, 0xD8, 0x24, 0x4C, 0xEE, 0xBB, 0x26, 0x88, 0x0E, 
            0x56, 0x71, 0xBD, 0x7C, 0x1E, 0x0C, 0xCD, 0xFF, 0xD3, 0xBF, 0x13, 0xB8, 0x83, 0x35, 0x85, 0x4A, 
            0xA6, 0x8E, 0xB1, 0x25, 0xD9, 0x3B, 0xD5, 0xA7, 0xC1, 0x5D, 0xE0, 0xB9, 0x30, 0xD8, 0xDA, 0x1A, 
            0x97, 0x51, 0xD3, 0xF5, 0x49, 0x85, 0xA0, 0xFC, 0x64, 0xFD, 0x66, 0x19, 0x26, 0x50, 0x5C, 0x75, 
            0xF9, 0xF2, 0xE5, 0x44, 0x17, 0x6F, 0xD5, 0xFF, 0x04, 0x5A, 0x4F, 0x9D, 0xC6, 0x0C, 0x41, 0xDC, 
            0x82, 0x4B, 0xF3, 0x37, 0x90, 0x64, 0x2F, 0x99, 0x7D, 0xA2, 0xE8, 0xE1, 0xA6, 0x0F, 0xE8, 0x96, 
            0xA0, 0x2B, 0x51, 0x59, 0x8C, 0xE4, 0xA6, 0x2E, 0x6B, 0xDA, 0x55, 0x3F, 0x77, 0xA9, 0xFF, 0x4C, 
            0x19, 0x89, 0xF7, 0x30, 0x24, 0x4D, 0x80, 0xE6, 0x45, 0x80, 0xC0, 0x8A, 0xE4, 0x1E, 0x6B, 0xB6, 
            0x7F, 0xEB, 0xE4, 0x1C, 0xC7, 0xB5, 0x0E, 0x1B, 0x09, 0xCE, 0x4A, 0x00, 0x80, 0x2F, 0x7F, 0xEB, 
            0xE9, 0x7E, 0xEF, 0x58, 0x38, 0xEA, 0xFD, 0x86, 0x2F, 0xBC, 0x31, 0xF8, 0x34, 0x07, 0x0E, 0xD3, 
            0xC1, 0x37, 0x8B, 0x6B, 0x14, 0x75, 0x96, 0xAC, 0xEE, 0x84, 0x4C, 0xBC, 0x87, 0xC7, 0x0E, 0x26, 
            0xED, 0x8D, 0x90, 0xA3, 0xCF, 0x17, 0x57, 0x08, 0x65, 0xF4, 0x87, 0x19, 0x88, 0xE1, 0xD9, 0xFC, 
            0x06, 0xFF, 0xEE, 0x02, 0xAC, 0x5B, 0x0D, 0xA4, 0x31, 0x23, 0x90, 0xB4, 0x6B, 0x4E, 0x5E, 0x33, 
            0x20, 0xE6, 0x9D, 0x4D, 0x03, 0x4C, 0xC3, 0x00, 0x6D, 0x0E, 0xCE, 0x77, 0x1F, 0xB1, 0xE3, 0xF1, 
            0xC7, 0x8F, 0x23, 0xB7, 0x6B, 0x4B, 0xC0, 0x35, 0x58, 0x95, 0x39, 0xF9, 0xEF, 0x4A, 0x69, 0x80, 
            0x27, 0xC3, 0x14, 0x4A, 0xE5, 0x06, 0x75, 0x3A, 0xEA, 0x06, 0xCA, 0x65, 0xBC, 0x47, 0x0B, 0x3A
            };
            public static readonly byte[] EDecimal = new byte[]
            {
                0x63, 0x2D, 0x86, 0xDC, 0x2D, 0x1F, 0x6C, 0xD9, 0x3D, 0xE9, 0xD3, 0x62, 0xEE, 0x1E, 0x20, 0xDD, 
            0x54, 0x9F, 0x68, 0x99, 0x3E, 0x90, 0x3F, 0xC8, 0xF7, 0xC9, 0xD6, 0x18, 0x7F, 0x7F, 0x82, 0x7C, 
            0xBB, 0xD3, 0x6D, 0xDE, 0xB2, 0x0E, 0x85, 0x47, 0xC6, 0xD5, 0xEE, 0xBC, 0x05, 0x3B, 0xFA, 0xB2, 
            0xFD, 0x30, 0xCE, 0xBB, 0xFD, 0x5C, 0x51, 0xE0, 0x18, 0xEA, 0xFF, 0x1A, 0xCB, 0xF9, 0x33, 0x24, 
            0xF9, 0x59, 0xE6, 0xD7, 0x3F, 0x60, 0xB4, 0x5A, 0x4B, 0xD0, 0xF2, 0xD0, 0x1B, 0x8A, 0x4C, 0xCE, 
            0x8A, 0xD6, 0x44, 0x3C, 0x66, 0xD6, 0x86, 0x43, 0xF5, 0x49, 0x8D, 0x61, 0x37, 0x06, 0x08, 0x3F, 
            0x2F, 0x94, 0x36, 0x98, 0x8F, 0x9F, 0x68, 0x9B, 0x22, 0xB7, 0xDF, 0x29, 0xAC, 0xB6, 0x50, 0x0C, 
            0xCD, 0x3A, 0x5F, 0x6C, 0xDA, 0x14, 0xDC, 0xE5, 0x47, 0x37, 0x7C, 0x7B, 0x61, 0x4B, 0xC6, 0x9A, 
            0x60, 0xE7, 0x83, 0x82, 0x8E, 0xBA, 0x0A, 0xB5, 0xA0, 0x8D, 0x9F, 0xB1, 0x81, 0x62, 0xE2, 0xCA, 
            0x16, 0x7D, 0xDD, 0xF0, 0xD2, 0xAE, 0x6C, 0x55, 0xEB, 0xB9, 0x09, 0xCD, 0x29, 0x2F, 0xAB, 0xB9, 
            0xEC, 0x89, 0x2B, 0xDB, 0x81, 0x5A, 0x3E, 0xA0, 0x39, 0xFB, 0x7C, 0xFD, 0xE3, 0x6F, 0x02, 0x3D, 
            0x0A, 0x0A, 0x4C, 0xC1, 0x24, 0x84, 0x6E, 0x5D, 0xA9, 0x22, 0xBF, 0xE0, 0x7C, 0x2F, 0x1A, 0xAA, 
            0x3E, 0x43, 0x54, 0xB2, 0x1B, 0xDC, 0x5D, 0x1B, 0x50, 0x10, 0x0A, 0x54, 0xD6, 0x4D, 0x2A, 0x38, 
            0xB2, 0x75, 0x61, 0xC2, 0x4D, 0x75, 0x8B, 0x00, 0x54, 0xE8, 0xAF, 0x21, 0xBB, 0x88, 0x20, 0x3A, 
            0xAD, 0xA2, 0x5C, 0x5C, 0x44, 0xD0, 0xDC, 0x49, 0xCE, 0x2E, 0xB0, 0x85, 0xA2, 0x25, 0xD9, 0x15, 
            0x61, 0xE7, 0x4D, 0x3B, 0x5E, 0xDC, 0x68, 0x52, 0x0F, 0xC5, 0x93, 0x8A, 0x1E, 0x82, 0x53, 0xB8
            };
            public static readonly byte[] OnePercent = new byte[]
            {
                0x1C, 0x5B, 0xFB, 0x72, 0x83, 0xD9, 0x19, 0xCA, 0xC1, 0x76, 0xCD, 0x86, 0xBB, 0x35, 0x9C, 0x62, 
            0x9D, 0x28, 0xD2, 0x86, 0x4A, 0x03, 0x08, 0xA7, 0xD6, 0xC1, 0x97, 0xCA, 0x89, 0x3B, 0x36, 0x62, 
            0x81, 0x45, 0xFD, 0x45, 0x3F, 0xE3, 0x3A, 0x33, 0xE5, 0xE8, 0xCB, 0xE9, 0x5E, 0x3A, 0x85, 0xED, 
            0xAA, 0x88, 0x90, 0x32, 0x51, 0xF4, 0x9A, 0xB7, 0xA9, 0xFA, 0x43, 0xEE, 0x1D, 0x75, 0xEB, 0x50, 
            0x06, 0x36, 0xF8, 0xB4, 0xA3, 0xE6, 0x78, 0x51, 0x38, 0x21, 0x23, 0xB5, 0xF2, 0xE5, 0x93, 0xB8, 
            0xFF, 0x24, 0x70, 0x75, 0x3D, 0xBC, 0xF0, 0x56, 0xB8, 0x1F, 0x2C, 0x09, 0xFB, 0x9C, 0x1E, 0x0E, 
            0xEA, 0x8D, 0xF8, 0xEC, 0xAF, 0xB4, 0xD1, 0x1E, 0x9A, 0x5A, 0xE4, 0xE9, 0x65, 0x84, 0x6E, 0xF6, 
            0x01, 0x6D, 0x35, 0xDB, 0x89, 0x64, 0xC8, 0xE4, 0xBB, 0x5D, 0xEE, 0xE3, 0xB4, 0x7E, 0xDC, 0xE3, 
            0xC9, 0x76, 0x81, 0x6C, 0xBA, 0xB1, 0x6C, 0x77, 0xBC, 0x60, 0x5A, 0xE3, 0x5B, 0xFB, 0xEB, 0x5B, 
            0xF1, 0x74, 0x7D, 0x37, 0xDA, 0x29, 0x3F, 0x62, 0xD1, 0x04, 0xD8, 0x45, 0x36, 0x09, 0x95, 0x94, 
            0xA7, 0xAC, 0xF1, 0x9B, 0xDB, 0x35, 0xFE, 0xF4, 0x5E, 0x85, 0xAD, 0xFF, 0x0F, 0xA7, 0x4D, 0x0B, 
            0x44, 0x68, 0xA4, 0xA7, 0x56, 0x9B, 0xBE, 0xC8, 0xA0, 0xEB, 0x3F, 0x3C, 0x7D, 0xE7, 0xA9, 0x5C, 
            0xF3, 0xE3, 0x40, 0xF9, 0x26, 0xD4, 0x95, 0x8B, 0x94, 0xCA, 0x44, 0xB2, 0x2F, 0xF0, 0xA6, 0xEA, 
            0x69, 0xE5, 0xE4, 0x0C, 0xBC, 0x15, 0x74, 0xA9, 0x4E, 0x37, 0x63, 0x89, 0x9A, 0x52, 0x19, 0x53, 
            0xFA, 0xF7, 0xCA, 0x4E, 0xDF, 0x65, 0x38, 0x23, 0x9A, 0x47, 0x2C, 0x2B, 0x08, 0xB1, 0xA7, 0xBA, 
            0x81, 0x27, 0x90, 0xEF, 0x59, 0xC4, 0x89, 0x03, 0x51, 0x96, 0x24, 0x29, 0x86, 0xD4, 0x41, 0xF3
            };
    }

    // Only public key stored - private key existed only during compilation!
    private static readonly byte[] _publicKeyBytes = new byte[]
    {
        0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xD6, 0x1D, 0xE5, 0xCE, 0xE1, 0x1D, 0x43, 
            0x12, 0x37, 0xBA, 0x54, 0xE3, 0x10, 0x90, 0xF1, 0x94, 0x22, 0x31, 0xDD, 0x11, 0xB7, 0x7B, 0x98, 
            0x4F, 0xD1, 0xD8, 0xC2, 0x4B, 0x73, 0x07, 0x62, 0x58, 0x5B, 0xE9, 0xD3, 0xE5, 0x68, 0x5F, 0xEA, 
            0xBE, 0xE7, 0x52, 0xEE, 0x14, 0xDF, 0xDF, 0x1C, 0x5F, 0x34, 0xB2, 0xC6, 0xAA, 0x9D, 0xEF, 0x71, 
            0xA2, 0xF2, 0xAA, 0x59, 0x45, 0x62, 0x97, 0xF5, 0x4F, 0xDF, 0x47, 0x37, 0x75, 0x67, 0x3B, 0x93, 
            0x05, 0x31, 0x61, 0xAF, 0xE4, 0x62, 0x7A, 0x6A, 0x58, 0xF0, 0x1B, 0x92, 0x18, 0x3F, 0x88, 0x3B, 
            0xC6, 0x59, 0x64, 0x21, 0xB4, 0xCF, 0xA8, 0xEF, 0xB6, 0x1F, 0x82, 0xC7, 0x7D, 0x91, 0xC9, 0xAB, 
            0xAE, 0x43, 0x2D, 0x3B, 0x6B, 0x84, 0x45, 0xCB, 0x36, 0x2F, 0xA8, 0xB4, 0x1E, 0x57, 0xBC, 0x6A, 
            0xDC, 0x7D, 0x92, 0xC4, 0x36, 0x41, 0xFA, 0x80, 0xAA, 0x6C, 0x2D, 0x1E, 0x60, 0xC5, 0x81, 0x18, 
            0x4D, 0x4B, 0xE4, 0x64, 0x78, 0x37, 0xD7, 0xCD, 0x4F, 0xA3, 0x5C, 0xDB, 0x21, 0xDA, 0xFA, 0x00, 
            0x24, 0x45, 0x82, 0x53, 0xD1, 0xFC, 0x15, 0x0C, 0xEF, 0x1B, 0xD0, 0x0B, 0x2C, 0x56, 0xB8, 0x42, 
            0x1F, 0x99, 0xD6, 0x84, 0x63, 0xAD, 0xC8, 0x2A, 0x67, 0x9E, 0xCC, 0x12, 0xB0, 0x0A, 0xA9, 0x88, 
            0x01, 0x7D, 0x23, 0x0E, 0x73, 0x8C, 0xEB, 0xA4, 0xFF, 0x55, 0x9C, 0x92, 0x00, 0x6B, 0x70, 0x10, 
            0x5A, 0x8B, 0x82, 0x0A, 0x5D, 0x2E, 0xF9, 0x1B, 0xAB, 0x22, 0xA9, 0x50, 0xAE, 0xE9, 0xBE, 0x41, 
            0x1E, 0x12, 0x50, 0x21, 0xDB, 0xDD, 0x0C, 0x51, 0x4B, 0xDB, 0xAA, 0x51, 0x8D, 0x3C, 0x6D, 0xD0, 
            0xC8, 0x7C, 0xC4, 0xEC, 0x4D, 0x9B, 0x7A, 0x32, 0xA1, 0x98, 0x0B, 0xBD, 0x08, 0x79, 0x81, 0x9E, 
            0xF1, 0x71, 0x22, 0xD2, 0xBD, 0xBD, 0x00, 0x81, 0xF1, 0x02, 0x03, 0x01, 0x00, 0x01
    };

    private static readonly long _storage;
    private static readonly RSA? _rsa;
    private const long _pepper = unchecked((long)0xC437910C05744775);

    static CryptoConstants()
    {
        EncryptedContainer container = new();
        var pointer = GCHandle.Alloc(container, GCHandleType.Pinned).AddrOfPinnedObject().ToInt64();
        _storage = pointer ^ _pepper;
        
        // Create RSA instance with public key only
        try
        {
            _rsa = RSA.Create();
            _rsa.ImportRSAPublicKey(_publicKeyBytes, out _);
        }
        catch
        {
            _rsa = null; // Graceful degradation
        }
    }

        public static double Pi
        {
            get
            {
                // SECURITY: Cannot decrypt without private key!
                // Private key was discarded after compilation
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static double E
        {
            get
            {
                // SECURITY: Cannot decrypt without private key!
                // Private key was discarded after compilation
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static double Sqrt2
        {
            get
            {
                // SECURITY: Cannot decrypt without private key!
                // Private key was discarded after compilation
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static double GoldenRatio
        {
            get
            {
                // SECURITY: Cannot decrypt without private key!
                // Private key was discarded after compilation
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static int MaxInt32
        {
            get
            {
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static int Answer
        {
            get
            {
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static decimal PiDecimal
        {
            get
            {
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static decimal EDecimal
        {
            get
            {
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

        public static decimal OnePercent
        {
            get
            {
                throw new CryptographicException("Constants encrypted with compile-time private key cannot be decrypted at runtime. This is intentional for maximum security.");
            }
        }

    /// <summary>
    /// Demonstrates that constants are truly immutable - even with full source code access,
    /// the values cannot be recovered without the compile-time private key.
    /// </summary>
    public static string GetSecurityInfo()
    {
        return $"Level 4 Security: Constants encrypted with RSA-2048. " +
               $"Private key existed only during compilation and was discarded. " +
               $"Public key size: {_publicKeyBytes.Length} bytes. " +
               $"Decryption impossible without private key.";
    }
}