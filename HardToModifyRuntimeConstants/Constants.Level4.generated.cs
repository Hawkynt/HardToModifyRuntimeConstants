// Level 4: One-Way Decryption Constants
// Private key stored for runtime decryption (one-way only)
// This file is auto-generated by ConstantObfuscator at compile time
// DO NOT EDIT MANUALLY - Changes will be overwritten

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace HardToModifyRuntimeConstants;

public static class CryptoConstants
{
    private readonly struct EncryptedContainer()
    {
            public static readonly byte[] Pi = new byte[]
            {
                0x3B, 0x47, 0xB7, 0xFE, 0xE8, 0xC3, 0xFD, 0x8A, 0xA2, 0x5C, 0xE7, 0xB2, 0xB3, 0x96, 0x5C, 0xA0, 
            0x71, 0x4E, 0x30, 0xDA, 0x2B, 0xE7, 0x91, 0x5F, 0x66, 0xE9, 0xB7, 0xA5, 0x32, 0xEC, 0x28, 0xB9, 
            0xEF, 0x47, 0x48, 0x1E, 0x49, 0x9C, 0x3A, 0x29, 0xD2, 0x18, 0x53, 0xF7, 0x7A, 0x05, 0x60, 0x29, 
            0xF4, 0x5A, 0x84, 0xA2, 0xCE, 0x2F, 0xE6, 0xB7, 0x03, 0x47, 0xEF, 0xD5, 0x80, 0xAB, 0x61, 0x56, 
            0x79, 0x79, 0x88, 0x0E, 0x5E, 0x9C, 0xF3, 0x97, 0x45, 0xB0, 0xFB, 0xF3, 0x0E, 0x0B, 0x84, 0xE1, 
            0x09, 0x09, 0x23, 0x00, 0xB8, 0xBA, 0xF1, 0x65, 0x46, 0x1E, 0xC2, 0xB2, 0x78, 0x15, 0x84, 0x3C, 
            0x61, 0x5A, 0x98, 0x5A, 0xF9, 0x4B, 0x65, 0x0C, 0x3E, 0xEF, 0x7D, 0x29, 0xCD, 0xE8, 0x1C, 0xE4, 
            0x24, 0x57, 0xD0, 0xBB, 0xC8, 0xE6, 0x5A, 0xAB, 0xE7, 0xED, 0x11, 0xEE, 0xA5, 0x34, 0x09, 0x47, 
            0x67, 0x92, 0x80, 0xED, 0x07, 0x84, 0xB2, 0x99, 0x2D, 0x2E, 0x2F, 0xE3, 0xA5, 0xC2, 0x00, 0x9D, 
            0x74, 0x03, 0xD5, 0x24, 0x7E, 0x6E, 0x51, 0xAF, 0x99, 0x93, 0x13, 0xAB, 0xB4, 0x84, 0x65, 0xB8, 
            0x65, 0x7B, 0xF5, 0x7E, 0x37, 0x10, 0x96, 0x88, 0x89, 0x7D, 0x8B, 0x86, 0x05, 0x79, 0x40, 0x45, 
            0x4D, 0x38, 0x04, 0x63, 0xF8, 0x69, 0x0A, 0x03, 0xB4, 0x2C, 0x03, 0x52, 0x20, 0x38, 0x9A, 0x2E, 
            0xC0, 0xEF, 0x8C, 0x53, 0xA6, 0xD6, 0xCC, 0xBA, 0x42, 0xEC, 0x73, 0xBE, 0x0D, 0x00, 0xE6, 0xDB, 
            0x1E, 0xA1, 0xBB, 0x0A, 0x82, 0xF5, 0xDC, 0x61, 0x73, 0x56, 0xDE, 0x14, 0x08, 0xBE, 0xF4, 0x3D, 
            0x12, 0x8A, 0x38, 0x2B, 0xBA, 0xB4, 0xD3, 0x26, 0x99, 0xC8, 0xC5, 0x1B, 0xD0, 0x2C, 0xC3, 0x30, 
            0x6B, 0x9D, 0xAB, 0x5E, 0xBA, 0x5F, 0x4B, 0x07, 0x94, 0xCF, 0x90, 0xE9, 0x12, 0xAF, 0x35, 0x85
            };
            public static readonly byte[] E = new byte[]
            {
                0x65, 0xE4, 0xDE, 0xB9, 0xF5, 0xA7, 0x47, 0xF7, 0x8E, 0x6E, 0x16, 0x5D, 0x23, 0x66, 0x98, 0x9A, 
            0xE3, 0x92, 0x0B, 0xA3, 0xA9, 0x78, 0xFA, 0x9C, 0xD2, 0xDF, 0x9C, 0x86, 0xA4, 0x67, 0x34, 0x89, 
            0x9B, 0xC7, 0xF3, 0xA9, 0x0E, 0x19, 0x06, 0x63, 0xD1, 0x55, 0x67, 0xC6, 0xD8, 0xC3, 0xEB, 0xB8, 
            0x6B, 0x1A, 0x6B, 0x62, 0x85, 0xC1, 0xB0, 0x41, 0xDA, 0x8A, 0x16, 0x42, 0xF7, 0xCE, 0xF4, 0xE8, 
            0xC6, 0xF9, 0xB4, 0x86, 0x63, 0x3A, 0x66, 0x8B, 0xC0, 0xED, 0x65, 0x30, 0x93, 0xA7, 0xA5, 0x06, 
            0xDB, 0xCD, 0xC6, 0xCB, 0xCE, 0xF1, 0xAE, 0x11, 0xC7, 0x76, 0x69, 0x55, 0x99, 0xA5, 0x61, 0x98, 
            0x02, 0x2E, 0xAF, 0x37, 0xF0, 0x4A, 0x2B, 0x40, 0x67, 0x52, 0xBD, 0x11, 0xF2, 0x51, 0xB7, 0x57, 
            0x3B, 0xAA, 0xC8, 0xAD, 0x5D, 0x19, 0x49, 0x20, 0x79, 0x7C, 0x36, 0x3C, 0xA4, 0x33, 0xE7, 0x5A, 
            0xF3, 0x59, 0x13, 0x29, 0x71, 0x97, 0x02, 0x17, 0x7E, 0x0E, 0x1A, 0x46, 0x96, 0xBA, 0x04, 0x4D, 
            0x2D, 0x46, 0xDD, 0x63, 0x9B, 0x17, 0xAE, 0x4B, 0x37, 0xE3, 0xC5, 0xB3, 0x55, 0xD0, 0xD5, 0x31, 
            0x37, 0xED, 0x6A, 0x42, 0xA6, 0x54, 0xA3, 0x3C, 0x10, 0x20, 0xF8, 0xF7, 0x70, 0xF0, 0xE5, 0xF3, 
            0x89, 0x12, 0xB4, 0x81, 0xEB, 0x35, 0x18, 0xC7, 0x52, 0x1C, 0x82, 0xC0, 0x70, 0x6E, 0x2D, 0x04, 
            0xC2, 0xA0, 0xEE, 0x76, 0xC3, 0xB6, 0xC0, 0x1C, 0xCF, 0x50, 0xFB, 0xED, 0x45, 0x02, 0xF1, 0x08, 
            0xDB, 0xB9, 0xCC, 0x26, 0x40, 0xE4, 0x11, 0xE1, 0xBA, 0x7E, 0xFC, 0x2C, 0x38, 0xBB, 0x92, 0xF3, 
            0x5C, 0xB3, 0x9E, 0x1A, 0x33, 0xB3, 0xFC, 0xB4, 0x5F, 0x03, 0xF8, 0xCC, 0xC3, 0xAF, 0x2D, 0xDF, 
            0x89, 0x98, 0xB1, 0xC0, 0x11, 0xA0, 0xD6, 0x9E, 0x3A, 0xF5, 0x2E, 0x2A, 0x8A, 0x0F, 0x77, 0x90
            };
            public static readonly byte[] Sqrt2 = new byte[]
            {
                0x07, 0x5B, 0x42, 0xCD, 0x3B, 0x96, 0x11, 0x12, 0xC2, 0x7C, 0x4C, 0x28, 0x63, 0xEF, 0xA9, 0x9C, 
            0x85, 0xDD, 0xFD, 0x18, 0x11, 0x67, 0x8C, 0x8B, 0xCF, 0x7F, 0x9C, 0xFC, 0x9B, 0x8D, 0xA2, 0x59, 
            0x12, 0x83, 0xD3, 0x75, 0x67, 0x3F, 0xAE, 0xA4, 0x07, 0x00, 0xA9, 0x93, 0xC7, 0x25, 0x19, 0xEB, 
            0xAB, 0x0F, 0x17, 0x28, 0x4E, 0x8A, 0x72, 0x0F, 0xAB, 0x79, 0x95, 0x78, 0x6A, 0x8F, 0x80, 0xFC, 
            0x41, 0xD2, 0x37, 0xEE, 0xCE, 0x68, 0x50, 0x4A, 0x04, 0xE3, 0xD0, 0x41, 0xD0, 0xC0, 0x6E, 0x0B, 
            0x17, 0x0D, 0xAC, 0x27, 0x4F, 0x4D, 0x50, 0x3E, 0xD9, 0x71, 0xDC, 0xAD, 0xBC, 0x2E, 0xD9, 0xF0, 
            0xEB, 0x5D, 0x0E, 0xFB, 0x61, 0xE4, 0xA4, 0xA9, 0xAB, 0x7D, 0xD3, 0x61, 0x0F, 0x12, 0xD1, 0xBA, 
            0x23, 0x15, 0xF2, 0xEF, 0x1A, 0xC3, 0x86, 0x3C, 0x79, 0xB0, 0xFE, 0xA7, 0x29, 0x14, 0xED, 0x77, 
            0xB8, 0x7B, 0x3C, 0x2E, 0x0B, 0x59, 0x67, 0xF8, 0xAE, 0xE4, 0x88, 0xE0, 0xF8, 0xCB, 0x37, 0x3A, 
            0xD8, 0xA5, 0xD6, 0x4D, 0x36, 0x5E, 0xCD, 0xC1, 0xA6, 0x04, 0x0F, 0xF8, 0x54, 0xFB, 0xA0, 0x48, 
            0xBD, 0xB7, 0x2E, 0x32, 0x4E, 0xAB, 0x87, 0xAC, 0x80, 0xCC, 0x76, 0x34, 0x70, 0x04, 0xEC, 0x23, 
            0xC8, 0xA3, 0x7D, 0xEA, 0xA7, 0xEB, 0xC1, 0x52, 0xD9, 0xFA, 0x32, 0xFD, 0xE3, 0xFF, 0xFE, 0xD2, 
            0x8E, 0xDE, 0xF9, 0x38, 0x29, 0xBF, 0x4D, 0x2B, 0xE8, 0x00, 0x2B, 0x9C, 0x8F, 0xBA, 0xBB, 0x5F, 
            0x3A, 0x26, 0x7B, 0x65, 0x4A, 0x0D, 0x18, 0x8C, 0xDE, 0xF3, 0x18, 0x53, 0x55, 0xFA, 0x47, 0x52, 
            0x1C, 0x1B, 0x56, 0xFE, 0xB3, 0x4C, 0x55, 0xD9, 0xD8, 0x81, 0xB9, 0x94, 0xB1, 0x1B, 0x1C, 0x0F, 
            0xE7, 0x85, 0x7D, 0x6F, 0x49, 0x46, 0x00, 0xA0, 0x2D, 0x6B, 0x7D, 0xEF, 0x81, 0x86, 0x46, 0x02
            };
            public static readonly byte[] GoldenRatio = new byte[]
            {
                0x6E, 0xA8, 0xBF, 0xDE, 0xE8, 0xBE, 0x44, 0xB2, 0x3C, 0xA7, 0xF5, 0x55, 0xEE, 0x44, 0xDE, 0xFC, 
            0x16, 0x5E, 0xFA, 0xA5, 0xC4, 0x15, 0x0D, 0x04, 0xC8, 0x96, 0x58, 0xE7, 0xB8, 0x2E, 0x55, 0xAA, 
            0x7D, 0x0B, 0xF2, 0x3E, 0x14, 0x64, 0x28, 0xAC, 0x76, 0x1A, 0x64, 0x1E, 0x7A, 0x3A, 0x33, 0x3F, 
            0x08, 0xBF, 0xA1, 0x0E, 0xB4, 0xCE, 0xC2, 0xC5, 0x30, 0xC0, 0x14, 0xE6, 0x00, 0x4B, 0xEE, 0xEB, 
            0x72, 0xBF, 0xD4, 0xD6, 0x9C, 0x0E, 0x97, 0x56, 0xA2, 0x11, 0xA6, 0x63, 0xBB, 0x6E, 0xF3, 0xF8, 
            0x53, 0xCC, 0x42, 0x5C, 0x2B, 0x3F, 0x0D, 0x69, 0x92, 0xA9, 0x15, 0x13, 0x93, 0x3A, 0x8D, 0x71, 
            0x01, 0x3E, 0x83, 0xDD, 0x89, 0xC8, 0x0F, 0x6B, 0xE6, 0x1B, 0x53, 0x7D, 0xB3, 0x75, 0x5E, 0x1E, 
            0x73, 0xA8, 0x17, 0xC9, 0xD2, 0x59, 0x1F, 0xDC, 0x26, 0x1D, 0x44, 0xCD, 0x03, 0x20, 0x60, 0x5A, 
            0x16, 0xB6, 0x86, 0x01, 0xF4, 0x56, 0x11, 0xD4, 0xE4, 0x6B, 0x1B, 0x5B, 0x4E, 0x6C, 0x2A, 0x1B, 
            0x7C, 0x79, 0x0F, 0xAB, 0x98, 0xB4, 0x87, 0x0A, 0x48, 0x10, 0x24, 0xFD, 0xE2, 0x0F, 0xA9, 0xE9, 
            0x45, 0xE7, 0xEE, 0xEB, 0xB0, 0x7E, 0x2B, 0x36, 0x81, 0xF0, 0xE8, 0x69, 0xEA, 0xC6, 0x72, 0xFD, 
            0xE9, 0x62, 0x84, 0xE1, 0xAA, 0xFC, 0x46, 0xFD, 0x1A, 0xD0, 0x50, 0x77, 0xB6, 0xA4, 0xC0, 0x32, 
            0x4E, 0x3F, 0x5D, 0xD0, 0xF9, 0x15, 0xE1, 0xA6, 0x07, 0x4D, 0xA9, 0xBC, 0x73, 0xE5, 0x2E, 0x57, 
            0x7C, 0xE0, 0xE5, 0x73, 0xA0, 0x2F, 0xF5, 0x7F, 0x21, 0x95, 0xA1, 0x33, 0x80, 0x0F, 0x20, 0xE4, 
            0x4D, 0xAF, 0x38, 0x60, 0x43, 0x02, 0x32, 0xD8, 0x36, 0xDC, 0x36, 0x34, 0xFD, 0x21, 0xFD, 0x8E, 
            0x39, 0x60, 0x3F, 0x82, 0x00, 0x80, 0x3E, 0xCC, 0x38, 0x55, 0xFF, 0x3B, 0x5E, 0x25, 0x6C, 0xC0
            };
            public static readonly byte[] MaxInt32 = new byte[]
            {
                0x60, 0xEB, 0x6E, 0x1D, 0x82, 0x04, 0x4D, 0xB5, 0x4A, 0xBC, 0x0A, 0x2A, 0x90, 0x24, 0x7B, 0xA5, 
            0x4B, 0xC1, 0x5C, 0xD8, 0xB9, 0x9D, 0x61, 0xAE, 0x75, 0xD7, 0x12, 0xFD, 0x33, 0xF5, 0xF3, 0xA0, 
            0x53, 0x9F, 0xDB, 0x21, 0x19, 0x06, 0x66, 0x82, 0x52, 0xFE, 0x0C, 0x7E, 0x0E, 0x72, 0x0C, 0x0B, 
            0x2B, 0x05, 0x84, 0x80, 0x38, 0xD5, 0x0B, 0xDB, 0x6E, 0xB2, 0x1E, 0x28, 0x94, 0x71, 0x5A, 0x06, 
            0x57, 0x0C, 0x41, 0x41, 0xE4, 0xEB, 0x44, 0x6B, 0x08, 0x70, 0xE4, 0xE1, 0x59, 0x52, 0xC9, 0xFA, 
            0x0E, 0xAB, 0x64, 0xF6, 0x0D, 0x42, 0x15, 0xF9, 0xCC, 0xBB, 0x0B, 0xA8, 0xA5, 0xF9, 0xF5, 0x98, 
            0x09, 0x04, 0x76, 0xF0, 0xE7, 0xA8, 0xA7, 0x03, 0x70, 0x6E, 0xAA, 0xCF, 0x76, 0x88, 0x48, 0x01, 
            0xA4, 0xFC, 0x1A, 0xDC, 0xC4, 0x68, 0xA5, 0xCD, 0xF1, 0x85, 0x38, 0xAE, 0x3A, 0x30, 0xC0, 0xDA, 
            0x0B, 0xE7, 0xCD, 0x6E, 0x8B, 0x7B, 0x57, 0xF3, 0x42, 0x6F, 0x7B, 0x1B, 0xD0, 0x1F, 0x60, 0x81, 
            0xEE, 0xA9, 0xAE, 0x8B, 0x6E, 0x8F, 0xFF, 0xA8, 0xAD, 0x63, 0x89, 0x3C, 0xC4, 0x19, 0xE9, 0x20, 
            0x39, 0x3F, 0xFF, 0x30, 0xB0, 0x2A, 0x65, 0xA4, 0xB6, 0x2D, 0x65, 0x7B, 0xD7, 0xD6, 0xC4, 0x3B, 
            0x56, 0x60, 0xA5, 0xD0, 0x2A, 0x31, 0x68, 0x26, 0xC3, 0x5E, 0xC2, 0xCF, 0x4E, 0x16, 0x8F, 0xB9, 
            0x02, 0xB3, 0x85, 0xF9, 0xED, 0xD3, 0x38, 0xE8, 0x6D, 0x2A, 0xB1, 0x64, 0x77, 0x89, 0xE8, 0xD9, 
            0x32, 0xC4, 0xE0, 0x7D, 0x5E, 0x20, 0x82, 0x8C, 0xBF, 0x00, 0xF9, 0xBB, 0x99, 0x3D, 0x97, 0xE3, 
            0xA0, 0xE0, 0x69, 0xD5, 0x2B, 0x5A, 0x94, 0xFB, 0xF0, 0xA0, 0x7C, 0x40, 0x32, 0x41, 0x07, 0x2B, 
            0xC5, 0xAC, 0x7D, 0x95, 0xBC, 0xB5, 0x49, 0xC4, 0x39, 0xF6, 0x93, 0xC5, 0xA4, 0x6E, 0xBC, 0x83
            };
            public static readonly byte[] Answer = new byte[]
            {
                0xA8, 0x51, 0x77, 0x72, 0x35, 0xE3, 0x81, 0x17, 0xC0, 0xDD, 0xB5, 0xC2, 0x57, 0x15, 0xBA, 0x62, 
            0xD2, 0x2C, 0x65, 0x18, 0x74, 0xF4, 0x31, 0x99, 0xE2, 0x4D, 0x5A, 0x88, 0x5D, 0x1F, 0x83, 0x76, 
            0x13, 0xD5, 0xA9, 0x7B, 0xFD, 0x0F, 0x69, 0x9D, 0x76, 0x57, 0x02, 0xF3, 0x5F, 0x1F, 0x64, 0x85, 
            0x1C, 0x98, 0x19, 0x09, 0xFE, 0x94, 0xEB, 0xF6, 0x8F, 0xCB, 0xD4, 0x34, 0x02, 0xDE, 0x65, 0xE9, 
            0xC6, 0xCF, 0xE0, 0xB7, 0x34, 0x45, 0xAA, 0xB5, 0xB0, 0xFC, 0x82, 0x0A, 0xAD, 0x7D, 0xB1, 0x6E, 
            0xCB, 0x40, 0xD1, 0x65, 0x66, 0xE6, 0x60, 0x14, 0x12, 0x6B, 0x85, 0xCC, 0xF6, 0xC4, 0xEA, 0xE8, 
            0x69, 0x73, 0xB9, 0x01, 0xD3, 0x01, 0xCC, 0x20, 0x27, 0x02, 0xB2, 0xFA, 0x6A, 0xB6, 0x2B, 0xC0, 
            0xF4, 0x1F, 0xB3, 0x3D, 0xE1, 0x45, 0x0A, 0x11, 0x71, 0x9B, 0xE2, 0x87, 0x14, 0x3A, 0x75, 0x3D, 
            0x44, 0x66, 0xDE, 0xA7, 0xB7, 0x35, 0x63, 0x24, 0x89, 0x51, 0x44, 0xC7, 0xF8, 0x77, 0xD5, 0xD2, 
            0x22, 0x25, 0x42, 0x61, 0x26, 0xD0, 0xC3, 0xF8, 0xB4, 0x9F, 0x51, 0x50, 0x01, 0x10, 0xC6, 0x34, 
            0x1D, 0xBA, 0xD5, 0x48, 0xDC, 0xE1, 0x18, 0xFB, 0x18, 0x0F, 0x90, 0x1E, 0x08, 0x56, 0x4C, 0x79, 
            0x38, 0x75, 0x9C, 0x7E, 0xB1, 0xCC, 0xA0, 0xD6, 0xC3, 0x5C, 0xD0, 0x1A, 0x24, 0x05, 0x16, 0xE3, 
            0xCE, 0xA3, 0xFB, 0xF0, 0x6A, 0x05, 0xEB, 0x13, 0x94, 0xAD, 0xF4, 0x70, 0xEA, 0x9D, 0xA8, 0x87, 
            0x3B, 0x35, 0x72, 0x76, 0x32, 0xF6, 0xEE, 0x85, 0x70, 0xA2, 0x80, 0x03, 0x58, 0x35, 0x93, 0x72, 
            0xA9, 0x37, 0x0B, 0x2C, 0xD1, 0x01, 0x11, 0x35, 0xED, 0x82, 0x60, 0x91, 0x05, 0x55, 0xA6, 0x66, 
            0xAA, 0x14, 0x2D, 0xE1, 0xAB, 0xE8, 0x5F, 0xD3, 0x54, 0xD6, 0xCE, 0xAE, 0x67, 0xC6, 0xB7, 0xFF
            };
            public static readonly byte[] PiDecimal = new byte[]
            {
                0x16, 0xD6, 0xC5, 0x71, 0x70, 0x43, 0xBE, 0x2C, 0x26, 0x15, 0x69, 0xF1, 0x5D, 0x0D, 0x60, 0xBB, 
            0x85, 0xAA, 0xB1, 0xFA, 0xB7, 0x71, 0xDD, 0x0C, 0xEA, 0x09, 0xA5, 0xF7, 0x67, 0x06, 0xC1, 0x28, 
            0x86, 0xC4, 0xDA, 0xD7, 0xC9, 0x9C, 0x0F, 0x1C, 0x30, 0x0C, 0x53, 0x94, 0xD9, 0x07, 0xAC, 0x40, 
            0x8B, 0xD5, 0xBF, 0x64, 0x97, 0xEF, 0xE2, 0x54, 0xC2, 0xCB, 0xAA, 0x67, 0x06, 0x72, 0x56, 0x89, 
            0x24, 0x32, 0x26, 0x47, 0x99, 0xFB, 0xF7, 0xDB, 0x3F, 0xAD, 0xC4, 0x02, 0x77, 0xEC, 0x5A, 0x9F, 
            0x23, 0xEA, 0x70, 0x7B, 0xF6, 0x7F, 0x76, 0x67, 0x93, 0xE6, 0x9D, 0x50, 0x20, 0xEE, 0x71, 0xB8, 
            0x97, 0x47, 0x1B, 0x06, 0x75, 0x84, 0xF5, 0x7B, 0xD2, 0x39, 0xA6, 0xDE, 0x6E, 0x03, 0x4F, 0xD1, 
            0xEC, 0xD5, 0x5F, 0x96, 0xFB, 0xB3, 0x6E, 0x4D, 0xEA, 0x8E, 0xFC, 0xDD, 0x35, 0x84, 0x5D, 0xB8, 
            0x12, 0x0F, 0xF1, 0x04, 0x10, 0x2B, 0x95, 0xAA, 0x7B, 0xCF, 0x07, 0x82, 0x87, 0x86, 0x5D, 0xF5, 
            0xC8, 0xB2, 0x28, 0xEC, 0xAD, 0x43, 0x53, 0x01, 0x79, 0xA3, 0xAE, 0x62, 0xFF, 0xEF, 0x68, 0x0F, 
            0xC9, 0xF3, 0x5D, 0xDF, 0x8C, 0xAA, 0xEB, 0x91, 0xE5, 0x23, 0xE4, 0x6F, 0xB4, 0x2E, 0x4B, 0x4B, 
            0x33, 0xCA, 0x98, 0x06, 0x86, 0xCE, 0x29, 0xCB, 0x21, 0x65, 0x59, 0x03, 0x61, 0x9B, 0x9A, 0xDC, 
            0x60, 0x0C, 0x91, 0x4F, 0x21, 0x97, 0x21, 0x71, 0xFE, 0xF1, 0x1C, 0x92, 0x3E, 0xD8, 0x87, 0xEB, 
            0x7B, 0x22, 0xE8, 0xBD, 0xD2, 0x28, 0xEB, 0xB8, 0xA2, 0x4F, 0xD5, 0xF2, 0xB0, 0x82, 0x40, 0xC6, 
            0xB7, 0x57, 0x65, 0x29, 0xB9, 0x85, 0xA7, 0xC3, 0xD0, 0x2B, 0x31, 0xF8, 0x67, 0x21, 0x5A, 0x2D, 
            0xFE, 0x4D, 0x65, 0x33, 0xF9, 0xCA, 0x0F, 0xEC, 0x8D, 0x19, 0xED, 0xCB, 0x77, 0xFA, 0x38, 0x94
            };
            public static readonly byte[] EDecimal = new byte[]
            {
                0xA8, 0x01, 0x0A, 0x6C, 0xC0, 0xFD, 0x97, 0xC5, 0x79, 0x90, 0x50, 0xCA, 0x9B, 0xDA, 0xF4, 0x7A, 
            0xF0, 0xDD, 0xF0, 0xB5, 0xC3, 0x44, 0x75, 0x04, 0xCE, 0x7A, 0x72, 0xFA, 0x1F, 0x6C, 0xFB, 0x28, 
            0x3C, 0x13, 0x48, 0x7C, 0x6F, 0x56, 0x25, 0x18, 0xDA, 0xB9, 0x0E, 0xF4, 0x9D, 0x37, 0xEF, 0x1F, 
            0xEE, 0x98, 0xAC, 0xBA, 0xE1, 0xF2, 0x39, 0x08, 0xD5, 0xC7, 0x61, 0x4B, 0x25, 0x28, 0x50, 0xD1, 
            0x5F, 0x1E, 0x25, 0x7C, 0x19, 0x1D, 0x6E, 0xE4, 0x85, 0x0B, 0x8B, 0x93, 0x05, 0xA9, 0xF1, 0x4F, 
            0x2C, 0x28, 0xC9, 0x21, 0x63, 0xDC, 0x92, 0xFF, 0x4F, 0x3C, 0x6C, 0x0E, 0x40, 0xD9, 0xBE, 0x2C, 
            0x01, 0x08, 0x2F, 0xDE, 0xC8, 0xD6, 0xA1, 0x93, 0x64, 0x64, 0x1B, 0x38, 0x90, 0x9E, 0x0F, 0xDD, 
            0x3E, 0x88, 0xDE, 0x95, 0x93, 0x82, 0xB7, 0x0F, 0xA5, 0xDD, 0x54, 0xFD, 0x68, 0x13, 0x75, 0x25, 
            0xED, 0x53, 0x5A, 0x67, 0x60, 0x9C, 0x09, 0x5F, 0x32, 0xB5, 0xCB, 0xBD, 0x10, 0x90, 0x64, 0xD2, 
            0x92, 0x43, 0x63, 0x5A, 0xDC, 0xA2, 0x87, 0xDA, 0xBC, 0x93, 0x87, 0xBD, 0x76, 0x01, 0x13, 0xA1, 
            0x04, 0x2C, 0xE8, 0xD7, 0x84, 0x95, 0x11, 0x11, 0xD4, 0xD2, 0x4A, 0xF7, 0x2A, 0x68, 0xF8, 0x5D, 
            0xC0, 0x4E, 0x62, 0x42, 0x0C, 0x35, 0xD7, 0x56, 0xDB, 0x93, 0xC1, 0xCD, 0x36, 0x9C, 0xB4, 0xF1, 
            0x46, 0x89, 0x3F, 0x12, 0x7B, 0x9C, 0xB0, 0x85, 0x79, 0xBC, 0x59, 0x82, 0x3A, 0x60, 0x72, 0xB1, 
            0x71, 0x26, 0x5B, 0x6B, 0xE6, 0xF7, 0xED, 0x9A, 0x9C, 0x0F, 0x32, 0x2F, 0xF3, 0x0B, 0xEC, 0x96, 
            0xE6, 0x7F, 0x9F, 0x3D, 0x0C, 0xB6, 0x78, 0x94, 0x17, 0xE2, 0x76, 0x3C, 0xEA, 0xBF, 0x4D, 0x75, 
            0x64, 0x03, 0xCC, 0x3E, 0x69, 0x0D, 0x24, 0xD2, 0xED, 0xA8, 0x6D, 0xB6, 0xDD, 0x6B, 0xCD, 0x4B
            };
            public static readonly byte[] OnePercent = new byte[]
            {
                0x1E, 0x9A, 0xB8, 0x58, 0xCC, 0xC6, 0x92, 0xCD, 0xD9, 0xC9, 0xD1, 0x1F, 0xCE, 0x9C, 0x95, 0xE7, 
            0x15, 0x4D, 0x7B, 0xD9, 0x40, 0xA1, 0xA8, 0x9B, 0x00, 0xB5, 0x9C, 0x0E, 0x2F, 0x49, 0x43, 0x7A, 
            0xC8, 0xE3, 0x0D, 0xD5, 0xC0, 0xDD, 0xA5, 0xB8, 0x3A, 0xEC, 0x0F, 0xF0, 0x2A, 0x15, 0xE3, 0x20, 
            0x63, 0xE0, 0x52, 0xDB, 0x8B, 0xE4, 0x4E, 0x22, 0xA4, 0x26, 0x08, 0x2D, 0x4C, 0x8C, 0xD9, 0xF9, 
            0xBE, 0x6C, 0x41, 0x4E, 0x13, 0x21, 0x4D, 0xA5, 0x10, 0x40, 0x64, 0x8E, 0xC6, 0xE9, 0xDF, 0xF6, 
            0x63, 0x0A, 0x7D, 0xD4, 0xA0, 0x43, 0x9C, 0x8A, 0xCD, 0x7C, 0xD4, 0xC2, 0x35, 0x97, 0x73, 0xDC, 
            0x20, 0x60, 0x07, 0x55, 0xE8, 0x54, 0x60, 0xB3, 0x79, 0x3C, 0x0E, 0xCB, 0xB8, 0x6E, 0xF2, 0x99, 
            0xDB, 0xC0, 0xF6, 0x47, 0x0A, 0x70, 0xDE, 0x0B, 0x9D, 0x75, 0x1D, 0xAA, 0xE3, 0x84, 0xDF, 0x81, 
            0x60, 0x84, 0xBF, 0x12, 0xE0, 0xE7, 0x9B, 0xD7, 0x49, 0x62, 0x7D, 0x9D, 0x18, 0x4A, 0x91, 0x29, 
            0xA8, 0x93, 0xD7, 0xBA, 0x0D, 0xFB, 0xDD, 0xBC, 0x93, 0x2E, 0xB3, 0x8F, 0x70, 0xAF, 0x82, 0x71, 
            0x0E, 0xCE, 0xF4, 0xFF, 0xC2, 0xB4, 0xAB, 0x5F, 0x21, 0x21, 0x2B, 0x20, 0x96, 0x7B, 0x5D, 0x17, 
            0xD9, 0xAB, 0xFF, 0x05, 0xF7, 0xFD, 0xB8, 0xCB, 0x2E, 0xAD, 0x56, 0xB2, 0xC5, 0x33, 0x55, 0xAD, 
            0xAB, 0x96, 0x44, 0xC0, 0xCE, 0x41, 0xD6, 0x33, 0xE0, 0xB3, 0x1E, 0x61, 0x15, 0x1B, 0xF3, 0xEA, 
            0xFE, 0x9D, 0x91, 0xC8, 0x4A, 0x4D, 0xA5, 0xAD, 0xEF, 0xE8, 0x65, 0xD1, 0x83, 0x2B, 0x7E, 0xCC, 
            0x61, 0xA4, 0x65, 0x71, 0x4B, 0xF2, 0xF8, 0xDF, 0xB7, 0xDB, 0x4B, 0x8C, 0x79, 0x73, 0x46, 0x79, 
            0x10, 0x20, 0x74, 0xB8, 0xFB, 0x19, 0xAC, 0xAC, 0x86, 0x85, 0xD8, 0x74, 0x6D, 0xF5, 0x7F, 0xB2
            };
    }

    // Only private key stored for one-way decryption
    // Public key is NOT stored to prevent re-encryption attacks
    private static readonly byte[] _privateKeyBytes = new byte[]
    {
        0x30, 0x82, 0x04, 0xA3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xDD, 0x31, 0x9A, 0x8E, 
            0x96, 0xE7, 0x5E, 0x4B, 0x82, 0x2E, 0xFB, 0xFF, 0xA7, 0xDD, 0x47, 0xCD, 0xC7, 0x1C, 0x22, 0xB6, 
            0xF1, 0xF3, 0x0E, 0x47, 0x39, 0xBD, 0x35, 0xBF, 0xDF, 0xEA, 0x25, 0x6D, 0x23, 0x8B, 0x2C, 0x8E, 
            0xB9, 0xD0, 0x47, 0xD2, 0x42, 0x89, 0x6B, 0x7A, 0xFC, 0x1C, 0x12, 0x9B, 0x3E, 0x19, 0xAC, 0xB1, 
            0x71, 0xF4, 0xA2, 0xFD, 0x5A, 0x26, 0x3C, 0x76, 0xBB, 0x09, 0xF7, 0xC4, 0xCF, 0x05, 0x6F, 0xAE, 
            0x33, 0xF6, 0x31, 0xD3, 0x39, 0x4D, 0x58, 0x7B, 0x72, 0xB8, 0x59, 0x32, 0x44, 0x42, 0x6C, 0xB6, 
            0x46, 0x2B, 0x4E, 0x8C, 0x78, 0x1A, 0x1E, 0x5A, 0xAC, 0x15, 0xEE, 0xE2, 0xF0, 0x94, 0x65, 0x93, 
            0xFC, 0x89, 0x80, 0xB7, 0xAD, 0x5C, 0x23, 0x6A, 0x64, 0x38, 0x0D, 0xB8, 0x74, 0x59, 0x8F, 0x3A, 
            0x25, 0x7A, 0xD1, 0x1B, 0x86, 0x68, 0x9C, 0x70, 0xAB, 0x8D, 0xF8, 0x86, 0xF0, 0x71, 0x02, 0xB3, 
            0xC7, 0xF0, 0xB1, 0xF2, 0x21, 0x50, 0x6F, 0x9A, 0x21, 0x37, 0xD3, 0xE7, 0x00, 0x19, 0x64, 0x1D, 
            0x5F, 0xFC, 0xA9, 0x31, 0x0F, 0xD6, 0x76, 0xA6, 0x31, 0xC0, 0xC5, 0x35, 0x78, 0xF0, 0xE9, 0x33, 
            0xB7, 0x60, 0xC5, 0x8D, 0x40, 0xFA, 0xDC, 0x1D, 0xE4, 0x58, 0xBC, 0x47, 0xFB, 0x9F, 0x18, 0xCC, 
            0x42, 0x45, 0xEB, 0xA8, 0xA2, 0x87, 0x0A, 0xDA, 0xE5, 0x9E, 0x98, 0xAA, 0x23, 0xE6, 0xD0, 0x63, 
            0x4A, 0x6C, 0xF0, 0xA5, 0x95, 0x7A, 0xBC, 0x73, 0xE2, 0x4A, 0x77, 0x52, 0xB5, 0x16, 0xF0, 0xD9, 
            0x70, 0x11, 0x4B, 0xE2, 0x0E, 0xF2, 0x30, 0x08, 0xCF, 0x26, 0x48, 0x3E, 0xD1, 0x39, 0xC0, 0xEA, 
            0x87, 0x83, 0x01, 0x48, 0xAE, 0x30, 0xCD, 0xF8, 0x96, 0xB6, 0xA3, 0xB4, 0xFE, 0x5F, 0xDE, 0x40, 
            0x73, 0x51, 0x22, 0x12, 0x74, 0x65, 0xA2, 0xCE, 0xED, 0x72, 0x3A, 0x71, 0x02, 0x03, 0x01, 0x00, 
            0x01, 0x02, 0x82, 0x01, 0x00, 0x6C, 0x6B, 0xF0, 0x12, 0x8C, 0xAD, 0x84, 0x6F, 0x06, 0xB4, 0xF9, 
            0x18, 0xEB, 0xB3, 0x6F, 0x8A, 0xD2, 0x5A, 0x5C, 0x39, 0xC8, 0x87, 0x17, 0x2C, 0x9A, 0x84, 0xC0, 
            0x5F, 0xF8, 0xE5, 0xD0, 0xCA, 0x9A, 0x6D, 0x91, 0xBD, 0xB4, 0x1E, 0xFF, 0xD5, 0x74, 0x7F, 0xDF, 
            0x8B, 0x3D, 0x20, 0x95, 0x8E, 0x3A, 0xF6, 0x62, 0xCB, 0xE7, 0xCB, 0xBE, 0x48, 0xE9, 0x73, 0x6C, 
            0x97, 0xD6, 0x3E, 0xA0, 0x90, 0x7B, 0xD9, 0x72, 0x50, 0xB5, 0x6F, 0xAC, 0x24, 0x99, 0x25, 0xEC, 
            0x85, 0x36, 0x4A, 0x5E, 0x8E, 0x61, 0x1F, 0x1E, 0x22, 0x8A, 0x6A, 0x97, 0xEA, 0x0A, 0xC4, 0xE2, 
            0xB4, 0x17, 0x3D, 0xF9, 0x06, 0x8C, 0x5E, 0x71, 0x1C, 0x04, 0xE1, 0x71, 0x92, 0x97, 0x0B, 0x5E, 
            0xE0, 0xBB, 0x97, 0x2E, 0x42, 0x87, 0xE5, 0x8E, 0x6B, 0x36, 0x0B, 0xE9, 0x8B, 0xD0, 0x6A, 0x5E, 
            0xA4, 0x6B, 0xB2, 0xFF, 0x6A, 0x5C, 0x0A, 0xF4, 0xAF, 0x09, 0x78, 0xA7, 0xA7, 0x88, 0xB7, 0x21, 
            0x1D, 0x43, 0x9A, 0x5E, 0xF5, 0x76, 0x52, 0xA3, 0x41, 0xAE, 0xEE, 0x23, 0xC2, 0x3C, 0x38, 0xA1, 
            0xD7, 0xF9, 0xAF, 0x04, 0x26, 0x5F, 0xE1, 0x01, 0x98, 0x69, 0xD3, 0xD7, 0x1C, 0x92, 0x9B, 0x80, 
            0xB7, 0xA6, 0xF6, 0x2C, 0xA6, 0xCF, 0xD6, 0xBB, 0x6E, 0xFF, 0xFB, 0x95, 0x58, 0xEF, 0xA4, 0x9F, 
            0x5A, 0x6D, 0x11, 0x03, 0xE6, 0xBC, 0xE6, 0x69, 0xA9, 0x8C, 0x54, 0x9F, 0x0F, 0x8B, 0x78, 0xAC, 
            0x40, 0xCD, 0x2C, 0xAE, 0x51, 0xBF, 0x81, 0xDD, 0x53, 0x8F, 0xED, 0x58, 0xF4, 0xA7, 0x97, 0xD6, 
            0x45, 0x8F, 0xBB, 0x5E, 0x80, 0x76, 0x94, 0x09, 0xD4, 0xCF, 0x6E, 0xDF, 0xCC, 0x59, 0xF3, 0xA0, 
            0x29, 0x97, 0xE8, 0x0E, 0x8A, 0x21, 0x31, 0x64, 0x3E, 0x75, 0xB5, 0x94, 0x70, 0x30, 0xF8, 0x1D, 
            0x11, 0xDF, 0xD4, 0x9B, 0x71, 0x02, 0x81, 0x81, 0x00, 0xEA, 0xC3, 0x61, 0xFB, 0x83, 0x4B, 0xA6, 
            0xF7, 0x94, 0xF8, 0xF3, 0x26, 0xAC, 0x3B, 0xB7, 0x8B, 0x0F, 0x36, 0x05, 0x7B, 0xD2, 0x68, 0x9A, 
            0xD1, 0x32, 0xA6, 0xE5, 0xEA, 0xB1, 0xDA, 0xDF, 0x8F, 0xAA, 0xE3, 0x5D, 0xC4, 0xD4, 0xC8, 0xC9, 
            0x04, 0xC5, 0xF9, 0xE3, 0x9A, 0x71, 0x69, 0x38, 0x06, 0x9E, 0x85, 0x81, 0x01, 0x66, 0x55, 0x4C, 
            0xFD, 0xDD, 0xC7, 0x51, 0x3C, 0x0A, 0x5B, 0x50, 0xCC, 0x57, 0x70, 0x9B, 0xD8, 0x84, 0xCE, 0x5D, 
            0xEB, 0xFF, 0x41, 0xC1, 0xB6, 0x27, 0x14, 0x2B, 0x42, 0xCC, 0x1A, 0xAF, 0xD8, 0x92, 0x6E, 0xA3, 
            0x23, 0xAE, 0x64, 0x80, 0x11, 0x86, 0x32, 0xA8, 0x89, 0xA8, 0xE1, 0xED, 0x4D, 0xFD, 0x8D, 0x17, 
            0x00, 0x47, 0x95, 0x7E, 0x49, 0xED, 0xD5, 0x2E, 0x81, 0x15, 0xB3, 0x17, 0xE6, 0xF2, 0xEF, 0x6A, 
            0x62, 0xFC, 0x23, 0x28, 0x11, 0x91, 0x6C, 0x38, 0x67, 0x02, 0x81, 0x81, 0x00, 0xF1, 0x33, 0xFB, 
            0x3B, 0xAD, 0x7D, 0x28, 0x0C, 0x6D, 0x8F, 0x49, 0x8A, 0x87, 0xA2, 0xAD, 0x45, 0x5C, 0xB9, 0xB9, 
            0xF4, 0x61, 0xF0, 0xDB, 0xE9, 0x38, 0x4C, 0x3C, 0xDC, 0x4D, 0xE4, 0x52, 0x0C, 0x6A, 0x40, 0xA9, 
            0xAC, 0x30, 0x2D, 0xD4, 0x8E, 0x85, 0xF7, 0xFC, 0xAA, 0x05, 0xA6, 0x03, 0x36, 0x23, 0xA5, 0x70, 
            0xDB, 0x80, 0xD9, 0x25, 0xEA, 0x31, 0xE1, 0xAE, 0x78, 0xAA, 0x45, 0xEB, 0x34, 0x14, 0xF8, 0xB8, 
            0x10, 0x92, 0xD2, 0xAA, 0x06, 0x7C, 0x0C, 0xDD, 0x56, 0xDA, 0xC2, 0x0C, 0x31, 0xB7, 0x6B, 0xA7, 
            0xD3, 0x56, 0x0E, 0xB6, 0xA0, 0x37, 0xB7, 0x3D, 0x4B, 0x8C, 0xE7, 0xA7, 0x02, 0x39, 0xEF, 0x55, 
            0x0E, 0x1A, 0xCF, 0x51, 0xA1, 0xED, 0x8A, 0x3D, 0x91, 0x13, 0xE8, 0xA4, 0x75, 0x4A, 0x28, 0x30, 
            0x67, 0x62, 0x52, 0x66, 0x52, 0x92, 0x0B, 0x9A, 0x91, 0x85, 0xAA, 0x8F, 0x67, 0x02, 0x81, 0x80, 
            0x2F, 0x0F, 0x05, 0x48, 0x16, 0x74, 0x86, 0xBE, 0xA0, 0x45, 0x1A, 0xF0, 0x88, 0x9B, 0xDB, 0xD9, 
            0xEB, 0x2D, 0xA8, 0x01, 0xBF, 0x16, 0xAA, 0xD9, 0xFE, 0x6E, 0x48, 0x2E, 0x38, 0x82, 0xA8, 0x47, 
            0xB3, 0x38, 0xAA, 0x66, 0x37, 0x45, 0x1C, 0x4E, 0x71, 0xA4, 0xFA, 0xC3, 0xCD, 0xB2, 0x0A, 0xC2, 
            0x00, 0xEA, 0xC0, 0x06, 0x58, 0xCE, 0x06, 0x85, 0xE8, 0xFB, 0xF8, 0x43, 0xB1, 0xCB, 0xC6, 0x31, 
            0x7F, 0xE1, 0x99, 0xCB, 0xD8, 0x2B, 0x49, 0xD6, 0x71, 0xAF, 0x6B, 0xB6, 0x28, 0xB5, 0x39, 0x4A, 
            0xC5, 0x81, 0x1F, 0xF8, 0xA8, 0xB9, 0xB6, 0xC8, 0x03, 0x40, 0x30, 0x0F, 0xD3, 0x37, 0xBA, 0x63, 
            0x05, 0xD0, 0x6B, 0xF2, 0x33, 0x3E, 0x21, 0xFB, 0x33, 0x5E, 0x3B, 0x17, 0x74, 0xAE, 0x44, 0x09, 
            0x2A, 0x21, 0x61, 0x4C, 0x31, 0x2C, 0x5E, 0xC6, 0x02, 0xC6, 0xC5, 0x54, 0x68, 0x33, 0x2A, 0x47, 
            0x02, 0x81, 0x80, 0x02, 0x86, 0x56, 0xC4, 0xE3, 0x26, 0x02, 0x3B, 0x4F, 0x12, 0x46, 0xE4, 0xCA, 
            0x52, 0xAB, 0x99, 0xA4, 0x44, 0xD5, 0x6B, 0x77, 0x72, 0xFB, 0xFA, 0x4E, 0xFA, 0x8D, 0x50, 0x89, 
            0x08, 0x30, 0xCB, 0xAC, 0x79, 0x0C, 0xCD, 0x9E, 0x9B, 0x7C, 0x34, 0x19, 0xB6, 0xE4, 0xD0, 0x2A, 
            0xCA, 0xF8, 0x11, 0xA3, 0x01, 0xE2, 0x52, 0x89, 0xE0, 0xBC, 0x02, 0xDD, 0x8E, 0xCD, 0x32, 0xBA, 
            0x25, 0x8D, 0x36, 0xB8, 0x59, 0x7A, 0x23, 0xC2, 0x45, 0xAE, 0x3D, 0xEF, 0x22, 0x7B, 0x56, 0xA3, 
            0x67, 0x90, 0x95, 0x1C, 0xA4, 0x65, 0xD7, 0x52, 0x79, 0x48, 0xF4, 0x18, 0x61, 0x34, 0xA5, 0x0B, 
            0xCE, 0x88, 0xF2, 0xFF, 0x04, 0x40, 0x51, 0xAB, 0x7A, 0x2C, 0x12, 0x93, 0xD7, 0xF4, 0x99, 0x06, 
            0x2A, 0x53, 0x3E, 0x5F, 0x0E, 0x58, 0xA3, 0x5C, 0x66, 0x1C, 0x68, 0x14, 0xDB, 0x46, 0x3C, 0xEB, 
            0xB7, 0x43, 0x55, 0x02, 0x81, 0x81, 0x00, 0x90, 0x65, 0x0A, 0xAA, 0x3E, 0xC1, 0xCA, 0xBA, 0xE2, 
            0xE4, 0xD3, 0xCB, 0xBD, 0xBD, 0x1B, 0x55, 0xE0, 0xD5, 0x91, 0x7F, 0x5F, 0x62, 0xF4, 0xD2, 0xBD, 
            0x0C, 0x95, 0x21, 0x06, 0x76, 0xFA, 0x6B, 0x14, 0x6C, 0x23, 0xB0, 0x39, 0x6C, 0xBC, 0xD7, 0x11, 
            0xD3, 0x68, 0x8D, 0xDA, 0x87, 0x1F, 0xBE, 0x47, 0x9C, 0x9A, 0x60, 0x65, 0x3A, 0x59, 0x3C, 0xC7, 
            0xE9, 0x69, 0xE5, 0x0F, 0xF1, 0xD9, 0x22, 0x07, 0xBC, 0xF2, 0xF6, 0x80, 0xBD, 0x5A, 0xAB, 0x67, 
            0xAC, 0xE7, 0xA7, 0xB1, 0x87, 0x2A, 0xF0, 0x3B, 0x4B, 0xD1, 0xCA, 0xF8, 0x8A, 0xEC, 0x61, 0xDC, 
            0x05, 0x0B, 0xD8, 0x71, 0x16, 0x24, 0x70, 0x5A, 0x13, 0xBA, 0xA4, 0xF9, 0x4F, 0xDE, 0xDB, 0x1A, 
            0xF8, 0x3F, 0xFA, 0x56, 0x85, 0xAA, 0x06, 0xFD, 0x90, 0x96, 0x2C, 0x14, 0x79, 0xCB, 0x62, 0x7C, 
            0x5C, 0xAF, 0x9C, 0x0A, 0x64, 0x16, 0x85
    };

    private static readonly long _storage;
    private static readonly RSA? _rsa;
    private const long _pepper = unchecked((long)0xC437910C05744775);

    static CryptoConstants()
    {
        EncryptedContainer container = new();
        var pointer = GCHandle.Alloc(container, GCHandleType.Pinned).AddrOfPinnedObject().ToInt64();
        _storage = pointer ^ _pepper;
        
        // Create RSA instance with private key for decryption
        try
        {
            _rsa = RSA.Create();
            _rsa.ImportRSAPrivateKey(_privateKeyBytes, out _);
        }
        catch
        {
            _rsa = null; // Graceful degradation
        }
    }

        public static double Pi
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.Pi, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant Pi: {ex.Message}", ex);
                }
            }
        }

        public static double E
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.E, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant E: {ex.Message}", ex);
                }
            }
        }

        public static double Sqrt2
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.Sqrt2, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant Sqrt2: {ex.Message}", ex);
                }
            }
        }

        public static double GoldenRatio
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.GoldenRatio, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant GoldenRatio: {ex.Message}", ex);
                }
            }
        }

        public static int MaxInt32
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.MaxInt32, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToInt32(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant MaxInt32: {ex.Message}", ex);
                }
            }
        }

        public static int Answer
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.Answer, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToInt32(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant Answer: {ex.Message}", ex);
                }
            }
        }

        public static decimal PiDecimal
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.PiDecimal, RSAEncryptionPadding.Pkcs1);
                    int[] bits = new int[4];
                    Buffer.BlockCopy(decryptedBytes, 0, bits, 0, 16);
                    return new decimal(bits);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant PiDecimal: {ex.Message}", ex);
                }
            }
        }

        public static decimal EDecimal
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.EDecimal, RSAEncryptionPadding.Pkcs1);
                    int[] bits = new int[4];
                    Buffer.BlockCopy(decryptedBytes, 0, bits, 0, 16);
                    return new decimal(bits);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant EDecimal: {ex.Message}", ex);
                }
            }
        }

        public static decimal OnePercent
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.OnePercent, RSAEncryptionPadding.Pkcs1);
                    int[] bits = new int[4];
                    Buffer.BlockCopy(decryptedBytes, 0, bits, 0, 16);
                    return new decimal(bits);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant OnePercent: {ex.Message}", ex);
                }
            }
        }

    /// <summary>
    /// One-way decryption: Constants can be decrypted at runtime but the process is irreversible.
    /// Values are encrypted at compile-time and can only be accessed through decryption.
    /// </summary>
    public static string GetSecurityInfo()
    {
        return $"Level 4 Security: One-way decryption with RSA-2048. " +
               $"Constants encrypted at compile-time, decryptable at runtime. " +
               $"Public key NOT stored (prevents re-encryption attacks). " +
               $"Private key size: {_privateKeyBytes.Length} bytes. " +
               $"Decryption is one-way only - values cannot be re-encrypted.";
    }
}