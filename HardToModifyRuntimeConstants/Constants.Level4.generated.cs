// Level 4: One-Way Decryption Constants
// Private key stored for runtime decryption (one-way only)
// This file is auto-generated by ConstantObfuscator at compile time
// DO NOT EDIT MANUALLY - Changes will be overwritten

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace HardToModifyRuntimeConstants;

public static class CryptoConstants
{
    private readonly struct EncryptedContainer()
    {
            public static readonly byte[] Pi = new byte[]
            {
                0x9F, 0xE1, 0xB9, 0x03, 0x11, 0x3D, 0xE5, 0x3F, 0x64, 0x69, 0x66, 0x75, 0x12, 0x7E, 0xC4, 0xC0, 
            0x8A, 0x4F, 0xF7, 0xD8, 0x84, 0x14, 0x09, 0xC3, 0x2F, 0x24, 0x5C, 0xBB, 0xF6, 0xEA, 0xA6, 0x4F, 
            0xB7, 0x80, 0x97, 0x9E, 0xB1, 0x0D, 0x99, 0x33, 0x89, 0x5A, 0xD4, 0x40, 0xBD, 0x5F, 0x63, 0x27, 
            0x47, 0xF6, 0x91, 0xE4, 0x04, 0xB8, 0xA0, 0xE7, 0xFE, 0xD8, 0xFF, 0xA4, 0x5F, 0xB2, 0x6D, 0x45, 
            0xC2, 0x5F, 0x38, 0x3F, 0xA8, 0x6D, 0x5A, 0xC4, 0x00, 0x24, 0x70, 0x60, 0x74, 0x83, 0x8F, 0xD4, 
            0x3F, 0xC6, 0xD9, 0x8D, 0xDE, 0x61, 0x8D, 0x9B, 0xE8, 0x50, 0xF0, 0xC8, 0x3A, 0xF5, 0x32, 0x1C, 
            0x89, 0xEB, 0x5D, 0x7F, 0x61, 0xA2, 0x4A, 0x22, 0xF6, 0x0F, 0xCF, 0x99, 0xB2, 0x45, 0x31, 0xB6, 
            0xF9, 0xF4, 0x04, 0x4F, 0xA5, 0x3E, 0x83, 0x9E, 0x9E, 0x9E, 0xA1, 0x96, 0x78, 0x83, 0x6B, 0x81, 
            0xD6, 0xFD, 0xD0, 0xF0, 0xA7, 0xC2, 0x9E, 0x6A, 0x14, 0xD1, 0xA2, 0x7E, 0x95, 0x6D, 0x16, 0xC0, 
            0xD0, 0xA7, 0xB4, 0xD8, 0xE3, 0x28, 0xF5, 0x07, 0x3C, 0xBC, 0x04, 0x87, 0x8D, 0x95, 0x88, 0x2C, 
            0x7F, 0xC5, 0x61, 0xA2, 0x99, 0xCC, 0xFA, 0x3B, 0x56, 0x6E, 0xB3, 0x91, 0x44, 0x5F, 0x98, 0x59, 
            0xCC, 0xDD, 0x26, 0x65, 0x83, 0x20, 0xE3, 0xD8, 0xDA, 0x7B, 0x4B, 0x1A, 0xD8, 0x1C, 0xF8, 0x6B, 
            0x0A, 0xAF, 0x79, 0x24, 0xD0, 0xAF, 0x79, 0x07, 0xDB, 0x9D, 0x40, 0x20, 0xDD, 0x24, 0x41, 0x86, 
            0xD5, 0x55, 0x0D, 0xCF, 0xED, 0x30, 0x96, 0x71, 0x49, 0x3A, 0xE9, 0x68, 0x70, 0xF8, 0x8E, 0xA4, 
            0x29, 0x32, 0x7C, 0x14, 0xF3, 0x7F, 0x82, 0x61, 0xEB, 0x87, 0x84, 0x20, 0xAE, 0xA0, 0x09, 0xA3, 
            0x61, 0x5E, 0x7B, 0x85, 0xCD, 0x8A, 0xB8, 0x55, 0xDA, 0x2B, 0xA4, 0x62, 0x42, 0x4B, 0xC8, 0x44
            };
            public static readonly byte[] E = new byte[]
            {
                0x75, 0x2B, 0x16, 0x60, 0x3E, 0x93, 0x92, 0x3B, 0x43, 0xD2, 0xB3, 0x2F, 0xE1, 0x79, 0x2F, 0x93, 
            0x32, 0x7B, 0x5F, 0xEB, 0xDC, 0xBB, 0x82, 0x2B, 0xDE, 0x99, 0xBD, 0x5C, 0x7B, 0x28, 0x4E, 0xC7, 
            0xCB, 0x3B, 0x92, 0xFD, 0x9E, 0x17, 0x88, 0xA3, 0x0C, 0x12, 0x70, 0x68, 0x8C, 0xBE, 0xF8, 0xA8, 
            0xDB, 0xA2, 0xB6, 0xFB, 0xA7, 0x8A, 0xE8, 0x6A, 0x53, 0xDF, 0x29, 0xA8, 0xA6, 0x2F, 0x25, 0xE8, 
            0xB1, 0x62, 0xDF, 0xEC, 0x19, 0x3A, 0x07, 0xDF, 0x7F, 0x4F, 0x4F, 0x90, 0x48, 0xCD, 0x7F, 0xCB, 
            0x26, 0x92, 0x33, 0x6D, 0x39, 0x25, 0x4F, 0x25, 0x5D, 0x52, 0xA2, 0xE6, 0x5C, 0x68, 0x07, 0xC4, 
            0x74, 0x9E, 0x2C, 0xDE, 0x93, 0x7B, 0x9C, 0x30, 0x3A, 0xB4, 0xEC, 0xC7, 0x27, 0x36, 0x17, 0x0A, 
            0x1A, 0xF6, 0x36, 0x89, 0x89, 0x33, 0xF2, 0xDA, 0x64, 0xA6, 0x36, 0x9E, 0x6B, 0x2A, 0x26, 0x36, 
            0x62, 0x87, 0xD8, 0xDE, 0x06, 0xCF, 0xEF, 0xF7, 0x4A, 0xB2, 0xD2, 0xD4, 0x8F, 0xDD, 0xF1, 0x01, 
            0x5C, 0x52, 0x65, 0x4C, 0xA9, 0x2B, 0xD1, 0xCE, 0x59, 0x11, 0x93, 0x9B, 0xB6, 0x88, 0x64, 0xBE, 
            0x02, 0x72, 0xB5, 0x21, 0xC2, 0xE7, 0x28, 0x89, 0x28, 0x5A, 0x39, 0x46, 0x4E, 0xB6, 0xEA, 0xEF, 
            0x26, 0x78, 0x45, 0x43, 0x50, 0x60, 0xF2, 0x10, 0xA2, 0x49, 0xB2, 0xE1, 0x78, 0x25, 0xB0, 0x6A, 
            0xEC, 0x7B, 0xBA, 0x91, 0x5B, 0x7B, 0x14, 0x80, 0x45, 0xF3, 0x97, 0x1F, 0x40, 0x32, 0x98, 0xB2, 
            0xBA, 0x00, 0x28, 0x3C, 0x5C, 0x5B, 0x3B, 0xCF, 0x99, 0x5A, 0xAB, 0x80, 0xD4, 0xCC, 0x81, 0x33, 
            0x96, 0x61, 0xF6, 0x99, 0xFB, 0xFC, 0xA7, 0x91, 0x41, 0x58, 0xA9, 0x64, 0x95, 0xF8, 0x0E, 0x70, 
            0x7B, 0x86, 0x17, 0x29, 0xBE, 0x4F, 0xFF, 0xA2, 0xA3, 0x0D, 0x98, 0x3B, 0xD3, 0xF0, 0xB9, 0x66
            };
            public static readonly byte[] Sqrt2 = new byte[]
            {
                0xCB, 0xFC, 0xDD, 0xDC, 0xD5, 0x56, 0x03, 0xE2, 0x27, 0x2A, 0x3F, 0xAF, 0x7E, 0xC2, 0x38, 0x09, 
            0x6E, 0xC1, 0x89, 0x7A, 0x3F, 0xA0, 0x0A, 0xCA, 0x9E, 0x9D, 0x5F, 0x78, 0xDB, 0x4F, 0xEA, 0x57, 
            0x54, 0x5E, 0xAF, 0x3F, 0x86, 0xA0, 0xBF, 0x52, 0x3C, 0x2F, 0xAD, 0x35, 0x36, 0x21, 0x81, 0x59, 
            0x41, 0x70, 0x5C, 0xD6, 0x41, 0xE9, 0x60, 0x86, 0x9C, 0xFB, 0x2B, 0x57, 0xD9, 0x5E, 0x00, 0xB3, 
            0xD2, 0x8E, 0xB2, 0xA4, 0x1D, 0xCB, 0xF7, 0x82, 0xF6, 0x64, 0x2C, 0x01, 0x84, 0x3A, 0xFB, 0x44, 
            0x8D, 0xF9, 0xEF, 0x77, 0x5F, 0x62, 0xE8, 0x5F, 0x5A, 0x32, 0x28, 0x9B, 0x80, 0x5C, 0xA4, 0xA5, 
            0x28, 0xBA, 0x91, 0xE6, 0xE5, 0x53, 0xA1, 0x9D, 0x6F, 0x5A, 0xAF, 0x0F, 0x6E, 0xEA, 0x47, 0x2D, 
            0x19, 0x56, 0x28, 0x37, 0x95, 0xAE, 0x51, 0x0F, 0x1D, 0xEA, 0xEA, 0x68, 0x91, 0x81, 0x81, 0xBC, 
            0x33, 0x48, 0xE6, 0x2E, 0xF8, 0xF3, 0x6E, 0x49, 0xC8, 0x26, 0x10, 0xBF, 0x1A, 0x99, 0x4C, 0x09, 
            0xCF, 0xD1, 0xE5, 0xF6, 0x38, 0x9C, 0x44, 0x07, 0x7A, 0x46, 0x08, 0x7E, 0x3F, 0x73, 0x4A, 0x24, 
            0x45, 0xB7, 0x22, 0xCE, 0x3D, 0x93, 0x4C, 0x2D, 0xE0, 0x4E, 0xC0, 0x41, 0x45, 0x1B, 0x3C, 0xE9, 
            0xAD, 0xD2, 0x45, 0xF5, 0x0E, 0x45, 0x49, 0x8A, 0x93, 0x50, 0x80, 0x76, 0x52, 0x04, 0x14, 0xC1, 
            0x50, 0x5C, 0x54, 0xC5, 0x4E, 0xE4, 0xA7, 0x0B, 0xB3, 0x58, 0xDB, 0x92, 0x43, 0xB7, 0x12, 0xC5, 
            0x77, 0x6E, 0xD8, 0xE4, 0x51, 0x23, 0x30, 0x44, 0x0E, 0xCC, 0x15, 0x63, 0x6D, 0x23, 0x0B, 0xB8, 
            0xB2, 0x60, 0x88, 0x78, 0x19, 0xB8, 0xCE, 0xF5, 0x1B, 0x51, 0x47, 0x82, 0xEA, 0x5E, 0x02, 0xB6, 
            0x2D, 0xCB, 0xB0, 0xDB, 0x2E, 0xA3, 0xC5, 0x7F, 0x51, 0x92, 0x3B, 0xD8, 0xC7, 0xA6, 0x48, 0xD4
            };
            public static readonly byte[] GoldenRatio = new byte[]
            {
                0x4E, 0x02, 0xCC, 0xF9, 0xEF, 0xD8, 0x4B, 0x87, 0x95, 0x11, 0x96, 0x90, 0x78, 0x0E, 0x68, 0x52, 
            0xEC, 0x7A, 0x48, 0xE4, 0x17, 0xC6, 0x0B, 0x07, 0x18, 0xB8, 0x0F, 0x03, 0x6C, 0xCC, 0x94, 0x38, 
            0xE6, 0x4B, 0x4E, 0x6D, 0x39, 0x15, 0xF2, 0xC8, 0x4E, 0xBD, 0x79, 0x5E, 0x14, 0xE2, 0xA6, 0x26, 
            0xF2, 0x11, 0x8C, 0xC0, 0xA1, 0xD9, 0x7B, 0xF8, 0xF1, 0x90, 0x1B, 0x3C, 0xF2, 0x59, 0x80, 0x9E, 
            0x43, 0xEE, 0x26, 0xB8, 0xF0, 0xA4, 0x70, 0x59, 0x27, 0x99, 0x0E, 0x95, 0x4E, 0x63, 0x6B, 0x2D, 
            0x8D, 0xA5, 0x97, 0xDC, 0xD1, 0x52, 0xC1, 0xB1, 0x06, 0xD9, 0x9E, 0x6A, 0x1C, 0x92, 0x3F, 0x34, 
            0xCF, 0xF1, 0x1D, 0x17, 0xB2, 0x9B, 0xDB, 0x12, 0xEA, 0x1A, 0x8C, 0x86, 0x54, 0x92, 0x89, 0x2C, 
            0xCE, 0x5C, 0x34, 0x57, 0x48, 0xB9, 0x1B, 0xB3, 0x36, 0x59, 0xC2, 0xF9, 0xCA, 0x46, 0x81, 0x05, 
            0x73, 0x72, 0x08, 0x70, 0x65, 0x3C, 0x73, 0xDF, 0x51, 0xC2, 0x71, 0xC2, 0x9D, 0x09, 0x8C, 0x03, 
            0x13, 0xB9, 0x00, 0x80, 0x62, 0xFB, 0x29, 0x97, 0x01, 0x59, 0x60, 0x7B, 0x29, 0x09, 0x47, 0x12, 
            0x9D, 0x6A, 0x96, 0x95, 0x50, 0xF9, 0xB6, 0x2C, 0x64, 0xF2, 0x60, 0x9F, 0x23, 0x49, 0x79, 0x3A, 
            0x19, 0x8C, 0x81, 0xAA, 0x26, 0x3D, 0xFB, 0xD7, 0x59, 0x4D, 0xE3, 0xDA, 0x16, 0x96, 0x4D, 0xE4, 
            0xAF, 0xE1, 0xDD, 0x4B, 0x92, 0x7A, 0x2C, 0x5B, 0x3B, 0xDE, 0xFA, 0xA4, 0xC7, 0xD0, 0xE3, 0xD5, 
            0xDF, 0x14, 0x6A, 0x10, 0x0A, 0x4B, 0x0F, 0x73, 0xB6, 0x07, 0xF0, 0x70, 0xB8, 0x67, 0xD7, 0xAF, 
            0x69, 0x18, 0x1F, 0x4A, 0xAD, 0x4C, 0xF5, 0x3D, 0xB6, 0x5D, 0x94, 0xB5, 0x86, 0x36, 0x05, 0x31, 
            0x1F, 0xF0, 0xDA, 0x39, 0x2F, 0xEB, 0xAC, 0x01, 0x45, 0x2E, 0xB0, 0x57, 0xC3, 0x1A, 0x4D, 0xD6
            };
            public static readonly byte[] MaxInt32 = new byte[]
            {
                0x8B, 0xCE, 0x62, 0x9B, 0xFA, 0x7B, 0xF3, 0x28, 0x45, 0xBE, 0xF6, 0x79, 0x84, 0x86, 0xBD, 0xC4, 
            0x30, 0x30, 0xB7, 0xFC, 0xF1, 0x3D, 0xC4, 0x47, 0x81, 0xBA, 0xCC, 0x16, 0x5A, 0xFF, 0x0A, 0xF3, 
            0x40, 0x96, 0x25, 0xF6, 0x8E, 0xB2, 0x3B, 0xA7, 0x01, 0xBC, 0x33, 0xF0, 0x03, 0xA7, 0x53, 0xD3, 
            0x00, 0x09, 0x30, 0x37, 0x92, 0xE4, 0x6D, 0x21, 0x69, 0x0F, 0xD5, 0xDB, 0x94, 0xE2, 0xF5, 0x7D, 
            0x37, 0x60, 0x32, 0x55, 0x0E, 0xBD, 0xD7, 0x5B, 0xC0, 0x13, 0x25, 0xE6, 0x67, 0xB9, 0x62, 0xEA, 
            0xAD, 0x46, 0xCC, 0x6D, 0x42, 0x5E, 0x7E, 0x68, 0xA8, 0x12, 0xE5, 0x25, 0xE7, 0xE9, 0x44, 0x04, 
            0x52, 0x63, 0x13, 0xC8, 0xD4, 0xCC, 0xF5, 0x0E, 0xFC, 0xE7, 0xBD, 0x71, 0x44, 0x13, 0xA0, 0x6B, 
            0x28, 0x8C, 0xDC, 0x36, 0xED, 0x1B, 0x37, 0x25, 0x8F, 0x2F, 0xA8, 0x66, 0x68, 0xFF, 0xFE, 0xFD, 
            0xF7, 0xC4, 0x04, 0x1A, 0xFC, 0x4B, 0xF9, 0x5D, 0xF8, 0xB1, 0x76, 0x34, 0x83, 0x8D, 0x65, 0xC5, 
            0xC0, 0xE6, 0x90, 0xEA, 0x0C, 0x6F, 0xA9, 0x9F, 0x6E, 0x2F, 0x53, 0x57, 0xC2, 0x51, 0xA7, 0xA0, 
            0xF4, 0xC9, 0xED, 0x5B, 0x40, 0xD2, 0x10, 0x17, 0xC9, 0x83, 0x8B, 0x6D, 0x91, 0x33, 0x33, 0x2C, 
            0xD1, 0xEF, 0xC5, 0xF7, 0xDF, 0xC4, 0x98, 0xAA, 0xD8, 0x7E, 0x24, 0x30, 0x36, 0xC3, 0x87, 0x9A, 
            0x09, 0x17, 0x56, 0xF5, 0xAF, 0x19, 0x9C, 0xB5, 0x43, 0xBD, 0xC9, 0xD4, 0x8E, 0xE9, 0xF9, 0xB2, 
            0xF2, 0x95, 0xBE, 0x6F, 0x29, 0xE7, 0x5C, 0x57, 0x4A, 0xC8, 0xF7, 0x3F, 0x87, 0x4F, 0x73, 0xEE, 
            0xDD, 0x8E, 0x5A, 0x44, 0x64, 0xD7, 0x93, 0xD0, 0x9D, 0x45, 0x57, 0x8C, 0xDA, 0xED, 0xDA, 0x47, 
            0xFE, 0xDB, 0xC3, 0xC4, 0x56, 0x8D, 0xE7, 0xC0, 0xA9, 0xDE, 0x25, 0xB2, 0x4A, 0x3A, 0xAF, 0x07
            };
            public static readonly byte[] Answer = new byte[]
            {
                0x70, 0x01, 0x0C, 0xEA, 0x1E, 0xA1, 0x3A, 0x1D, 0xF1, 0x37, 0x5C, 0x61, 0xE8, 0x29, 0x23, 0x20, 
            0x54, 0x82, 0x8D, 0xCD, 0xF9, 0xCD, 0x1B, 0xF3, 0xF5, 0x20, 0xE0, 0x12, 0x2C, 0x70, 0x38, 0x06, 
            0x0D, 0xCD, 0x00, 0xC7, 0x76, 0x6E, 0xEF, 0xED, 0x02, 0xEA, 0x39, 0x7B, 0x81, 0x64, 0xCB, 0xEB, 
            0x50, 0x3A, 0xE3, 0xEC, 0x63, 0x6D, 0xC4, 0x78, 0xFF, 0x7F, 0xBF, 0xA1, 0xD2, 0x08, 0x1A, 0x8C, 
            0x84, 0x89, 0x28, 0xD7, 0x50, 0x1A, 0xAD, 0x7C, 0xD7, 0xB3, 0xCC, 0xDF, 0xB6, 0x35, 0x4D, 0x71, 
            0xB0, 0x09, 0x2A, 0x55, 0xF9, 0x03, 0x45, 0x47, 0xE9, 0xC9, 0xFD, 0x94, 0xEF, 0x33, 0xA4, 0xC1, 
            0x0D, 0xEB, 0x25, 0x00, 0xE6, 0xB1, 0xDF, 0xE7, 0x8A, 0x4E, 0xC3, 0x0D, 0xFD, 0x7D, 0x49, 0xB1, 
            0x63, 0xD6, 0x43, 0x23, 0xCD, 0x16, 0x37, 0x32, 0x83, 0x50, 0xBE, 0xB2, 0x45, 0x91, 0x92, 0x5B, 
            0x4B, 0xC5, 0x26, 0x47, 0x17, 0x2D, 0x4A, 0xEF, 0xD2, 0x10, 0x0A, 0xC0, 0xF6, 0x3C, 0x26, 0xFF, 
            0x36, 0x0F, 0x26, 0xC0, 0xD4, 0xF9, 0x15, 0x4E, 0x3C, 0x70, 0xD5, 0xE5, 0x0C, 0xED, 0x4D, 0xEE, 
            0xB4, 0x6A, 0xBF, 0x9A, 0x67, 0x45, 0xF8, 0x4D, 0x02, 0x1D, 0x3C, 0x62, 0xD7, 0x92, 0xED, 0x8E, 
            0xEB, 0x11, 0x36, 0x11, 0x6E, 0x66, 0xFF, 0x3E, 0x6F, 0xBC, 0xE1, 0xC9, 0x6D, 0x63, 0x1E, 0x55, 
            0x3F, 0x29, 0xD3, 0xDB, 0x36, 0x78, 0x95, 0xFD, 0x70, 0x51, 0xFD, 0x49, 0x77, 0x07, 0x36, 0xA8, 
            0x96, 0xEA, 0xA7, 0xE4, 0x25, 0xD3, 0x75, 0x82, 0xFE, 0x3E, 0xB4, 0x07, 0xAE, 0xBF, 0x30, 0x30, 
            0x46, 0x8F, 0x02, 0x54, 0x19, 0xE2, 0xAE, 0x9A, 0xD4, 0x02, 0xB1, 0xD2, 0xB1, 0x9A, 0xC9, 0x39, 
            0x80, 0x98, 0x04, 0x61, 0xFF, 0x19, 0x27, 0x02, 0x63, 0x6F, 0x26, 0x31, 0x24, 0x4D, 0xEA, 0xDD
            };
            public static readonly byte[] PiDecimal = new byte[]
            {
                0x77, 0x8C, 0x13, 0x00, 0x77, 0xCB, 0x21, 0xE4, 0x48, 0x64, 0x59, 0xE0, 0x55, 0xC4, 0x1A, 0xFD, 
            0xF4, 0xDF, 0x35, 0x5E, 0x17, 0xA0, 0xA6, 0xB5, 0x3D, 0xE3, 0x30, 0x04, 0xAF, 0x33, 0xCB, 0xDB, 
            0x52, 0x65, 0x79, 0x5E, 0x92, 0x75, 0x91, 0x72, 0xFB, 0xAE, 0x86, 0x87, 0xAA, 0x97, 0x61, 0x45, 
            0xBD, 0x12, 0x0E, 0x27, 0xD0, 0x68, 0xC0, 0xA4, 0xBA, 0x89, 0x4C, 0x93, 0x07, 0x6C, 0xFB, 0xBE, 
            0x95, 0x1D, 0x5F, 0x40, 0x15, 0x79, 0x38, 0x53, 0xAB, 0x5E, 0xCB, 0xC0, 0xE0, 0x0D, 0x11, 0x97, 
            0x74, 0x3A, 0xCE, 0x95, 0x76, 0x0C, 0x20, 0x41, 0xE2, 0xA4, 0x79, 0xEB, 0x3E, 0x5F, 0x1D, 0x88, 
            0xD0, 0x70, 0xF3, 0x7B, 0x3E, 0x4D, 0x26, 0x6E, 0x0A, 0x50, 0x46, 0x6A, 0x51, 0x21, 0xA7, 0x54, 
            0x9C, 0x82, 0x55, 0xC3, 0x00, 0x55, 0xFE, 0x76, 0x20, 0x72, 0xF8, 0x02, 0x20, 0x00, 0xCD, 0x7F, 
            0x4C, 0x22, 0x83, 0x78, 0x5E, 0xF9, 0x70, 0x42, 0x53, 0x37, 0xE6, 0x4C, 0xEE, 0x33, 0x0B, 0x8D, 
            0x4B, 0x52, 0x54, 0xF1, 0x4C, 0xCE, 0xD9, 0x90, 0x6F, 0x49, 0xD5, 0x02, 0x0E, 0x99, 0xD5, 0xC3, 
            0x2D, 0x5B, 0x89, 0x91, 0x10, 0xDA, 0x8E, 0xDA, 0xAD, 0x29, 0x59, 0xE3, 0xBC, 0x96, 0x24, 0xF3, 
            0x02, 0xCA, 0x6B, 0xD5, 0xEF, 0x9A, 0xF6, 0xFE, 0xC7, 0xCE, 0x4D, 0x75, 0x94, 0x87, 0xE0, 0xDD, 
            0xB4, 0x6C, 0xF8, 0xAC, 0xDF, 0x50, 0x28, 0x0A, 0x78, 0x4E, 0x81, 0x45, 0x9E, 0x89, 0xB8, 0x67, 
            0x78, 0x26, 0x70, 0xB5, 0x72, 0x71, 0xAB, 0xA6, 0x37, 0xDA, 0xD6, 0xE0, 0xD8, 0xCA, 0x34, 0x34, 
            0x16, 0xF7, 0x6B, 0xF9, 0xAE, 0xDB, 0xD8, 0xB9, 0x2F, 0xF3, 0x53, 0x21, 0x8E, 0x37, 0xC2, 0x38, 
            0xA1, 0xA7, 0x2B, 0x30, 0xCE, 0x1B, 0x89, 0xFF, 0x35, 0x8A, 0x61, 0x58, 0xBE, 0xBD, 0x16, 0xC6
            };
            public static readonly byte[] EDecimal = new byte[]
            {
                0xD3, 0xDE, 0x33, 0x10, 0x34, 0xE3, 0x92, 0xA6, 0x46, 0xB0, 0x94, 0xE3, 0xD0, 0x81, 0x0B, 0xC2, 
            0xEE, 0x4A, 0x33, 0x4B, 0x82, 0x7F, 0x4F, 0xBF, 0xDE, 0xCA, 0xD9, 0x05, 0x0E, 0xFA, 0xB2, 0x4A, 
            0x85, 0x83, 0xA7, 0xDE, 0xF3, 0x94, 0x8E, 0xF0, 0xDC, 0x76, 0x70, 0xB6, 0xE0, 0xBC, 0x43, 0x20, 
            0x6F, 0x12, 0x16, 0xB7, 0xCF, 0x5A, 0xD5, 0x02, 0x13, 0xC1, 0xB2, 0x21, 0x7C, 0x3F, 0xBF, 0x52, 
            0xFA, 0x50, 0x20, 0x65, 0x10, 0x71, 0x47, 0x59, 0x51, 0xF4, 0x03, 0x29, 0x78, 0x2D, 0x82, 0xAE, 
            0x33, 0xCD, 0x97, 0xA5, 0x82, 0xC2, 0xE7, 0xDB, 0x39, 0xB6, 0xB2, 0x3A, 0x23, 0x5B, 0xB5, 0xA2, 
            0xF2, 0x1C, 0x17, 0x7E, 0x9A, 0x91, 0xEB, 0xC5, 0xAA, 0x68, 0xAE, 0x26, 0xDF, 0x6B, 0xF6, 0x6D, 
            0xCE, 0xC9, 0x88, 0x7C, 0xFD, 0x10, 0x46, 0x52, 0x4C, 0x2B, 0xF3, 0x3A, 0x08, 0x2C, 0xE7, 0xEF, 
            0xC5, 0xF1, 0xF1, 0x50, 0x47, 0x46, 0xC8, 0xDF, 0x92, 0x86, 0xD6, 0x41, 0xC1, 0x26, 0xB3, 0xA6, 
            0xF5, 0x80, 0xFB, 0xD2, 0x64, 0x3C, 0x02, 0x53, 0x45, 0xAD, 0x44, 0xBA, 0xE2, 0x73, 0x73, 0x26, 
            0xCE, 0x13, 0x80, 0xD8, 0x04, 0x20, 0x29, 0x67, 0xAC, 0x7F, 0x92, 0xE6, 0x17, 0x58, 0x6D, 0x29, 
            0xBC, 0xA9, 0xA2, 0x16, 0x80, 0xC3, 0x0B, 0x05, 0x09, 0x47, 0x2E, 0x44, 0x01, 0x0E, 0x54, 0x7F, 
            0x1A, 0x3A, 0x52, 0x7B, 0x20, 0xB8, 0xC1, 0xF9, 0xF6, 0x7E, 0xAE, 0xA4, 0x10, 0xE4, 0x37, 0xB3, 
            0xE1, 0xCF, 0xCB, 0x43, 0x88, 0x8B, 0x89, 0x18, 0x2F, 0xD5, 0x64, 0xF5, 0x4E, 0x3A, 0x9E, 0xCB, 
            0x82, 0x29, 0xBC, 0xEE, 0xA8, 0x46, 0x4A, 0xF8, 0xE6, 0x6D, 0xB8, 0x69, 0x78, 0xF4, 0x4B, 0x5A, 
            0xDD, 0x8D, 0x3E, 0xF7, 0x5D, 0x6A, 0x29, 0x78, 0x2A, 0xB9, 0x0D, 0xCA, 0x7A, 0xF5, 0x51, 0xD5
            };
            public static readonly byte[] OnePercent = new byte[]
            {
                0x7C, 0xA9, 0xBB, 0x6A, 0xF0, 0x9B, 0x07, 0x81, 0xB6, 0x91, 0xD0, 0x8D, 0x90, 0x51, 0xDC, 0xEE, 
            0x5C, 0x91, 0x2D, 0xAA, 0x1B, 0x32, 0x6A, 0x7B, 0x0A, 0x7A, 0x57, 0x77, 0xA1, 0x1E, 0x09, 0x67, 
            0x1B, 0xE5, 0x92, 0xF1, 0x10, 0x07, 0xEB, 0x9C, 0xCF, 0x1B, 0xFB, 0x72, 0x11, 0xA2, 0xAE, 0x91, 
            0x51, 0x8E, 0xF4, 0xC4, 0x67, 0x0D, 0x92, 0xE2, 0x08, 0x66, 0x2D, 0xF5, 0xF0, 0xE2, 0x72, 0x9D, 
            0xDA, 0x8D, 0xC1, 0x7D, 0xD8, 0x2E, 0x16, 0xF8, 0x39, 0x2D, 0xBA, 0x8D, 0x32, 0x97, 0x49, 0x75, 
            0xEA, 0x90, 0x45, 0x30, 0xB8, 0x4D, 0x02, 0x55, 0xA3, 0x2B, 0x35, 0x2A, 0x1E, 0x49, 0x86, 0xD5, 
            0xEC, 0x50, 0x51, 0x1F, 0xB0, 0x70, 0x4A, 0x6E, 0x43, 0xE8, 0x01, 0x8C, 0x95, 0xE4, 0x53, 0x27, 
            0xA7, 0xA9, 0x42, 0xD0, 0xFC, 0x4D, 0xFA, 0xB5, 0x69, 0x38, 0xAB, 0xD6, 0x41, 0x87, 0x22, 0xAC, 
            0x4A, 0x9A, 0xE1, 0xEE, 0x88, 0x5A, 0x4E, 0xF7, 0x98, 0x8F, 0x02, 0x55, 0xE3, 0x77, 0xB4, 0xB4, 
            0x29, 0x54, 0xD7, 0xA4, 0xDC, 0x81, 0x88, 0x3C, 0x61, 0xE1, 0x53, 0x1C, 0x97, 0x4B, 0x75, 0x57, 
            0x7F, 0xFA, 0x9A, 0x55, 0x75, 0x8A, 0xAE, 0xE9, 0xF2, 0xA5, 0x2B, 0x5B, 0x51, 0xB7, 0x48, 0x89, 
            0xCD, 0xA4, 0xBC, 0x75, 0xE4, 0x34, 0x4A, 0x55, 0x77, 0x70, 0x65, 0xC9, 0xA3, 0x69, 0xE9, 0x91, 
            0xE6, 0xFF, 0xA2, 0x8A, 0x9B, 0xF1, 0x81, 0x2B, 0x0B, 0x92, 0x2E, 0x5B, 0x98, 0xEC, 0xA6, 0x6D, 
            0xE3, 0x0B, 0xE9, 0x39, 0xB4, 0x2B, 0x37, 0xD6, 0x16, 0x0A, 0xFB, 0xAC, 0xBE, 0x2A, 0x64, 0x8C, 
            0x8D, 0xAC, 0x1F, 0xF1, 0x02, 0xE4, 0x98, 0x75, 0x67, 0xDC, 0x43, 0x1C, 0xB5, 0xC0, 0x9A, 0x98, 
            0x80, 0xC2, 0x0F, 0xF2, 0x3B, 0xEE, 0x8D, 0xA6, 0x1D, 0xCC, 0x64, 0xF2, 0xBA, 0x5D, 0x99, 0xC1
            };
    }

    // Only private key stored for one-way decryption
    // Public key is NOT stored to prevent re-encryption attacks
    private static readonly byte[] _privateKeyBytes = new byte[]
    {
        0x30, 0x82, 0x04, 0xA3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xE5, 0xD5, 0xEB, 0x63, 
            0x38, 0xDB, 0x1B, 0xF0, 0x23, 0x85, 0xF7, 0xBD, 0xC6, 0x87, 0xA4, 0xE1, 0xF9, 0xBA, 0xED, 0xF8, 
            0x4D, 0xD3, 0xA7, 0x2A, 0x29, 0x0A, 0xB6, 0x8F, 0x13, 0xF7, 0xF5, 0xAA, 0x91, 0xB3, 0x8B, 0x11, 
            0x2F, 0x6F, 0x4C, 0x79, 0xD6, 0x60, 0x78, 0x14, 0x39, 0xF9, 0x61, 0xDB, 0x46, 0x94, 0xB6, 0x17, 
            0xB7, 0x0E, 0x2A, 0xFD, 0x51, 0x18, 0x5E, 0xB7, 0xB8, 0x26, 0xB9, 0x7A, 0x41, 0xEE, 0xE0, 0x9E, 
            0x62, 0xAF, 0xCC, 0x53, 0xF3, 0x74, 0xED, 0x21, 0x3D, 0xE2, 0xEF, 0xCF, 0xE0, 0x1C, 0xC3, 0x09, 
            0xE0, 0xAF, 0x8E, 0x54, 0x94, 0x7E, 0x6C, 0x74, 0x20, 0x06, 0xD1, 0x00, 0x7A, 0xFB, 0x31, 0x8E, 
            0x0A, 0xFB, 0xA2, 0xB8, 0xA7, 0x4E, 0xA4, 0x3E, 0x2A, 0x5A, 0x24, 0x2C, 0x67, 0xBA, 0xBC, 0x81, 
            0x57, 0xEC, 0x62, 0xE5, 0x5A, 0xD5, 0x4B, 0x84, 0x5C, 0x16, 0xB2, 0xE4, 0xA5, 0x7A, 0x01, 0x33, 
            0x2B, 0xBE, 0x9F, 0xED, 0x20, 0xB2, 0x05, 0x02, 0x71, 0xF6, 0xF8, 0xC7, 0xAF, 0x69, 0xA8, 0x96, 
            0xBB, 0x00, 0x3E, 0xED, 0xB2, 0x7A, 0xAB, 0xE5, 0x2A, 0xB6, 0xF5, 0x18, 0x12, 0x8D, 0x4F, 0xAC, 
            0xEA, 0x5D, 0x9B, 0x98, 0xF3, 0x6D, 0x05, 0x69, 0x49, 0x32, 0xF7, 0xBD, 0x16, 0x37, 0x13, 0xC4, 
            0x64, 0xBF, 0xD4, 0x44, 0x0C, 0xA4, 0xF1, 0x81, 0xC4, 0x77, 0xA0, 0xFD, 0xAC, 0xC1, 0x76, 0x0F, 
            0x08, 0xD2, 0xD7, 0x3F, 0x41, 0x13, 0xA4, 0x7B, 0x62, 0xA0, 0x17, 0x7D, 0xA4, 0x48, 0x92, 0x2F, 
            0xA4, 0xD4, 0x2F, 0x33, 0xE7, 0xCB, 0x1D, 0xA0, 0xFF, 0xCA, 0x15, 0x87, 0x82, 0xBC, 0x44, 0x56, 
            0x68, 0xE0, 0xF0, 0xB1, 0xFB, 0x19, 0x41, 0xDF, 0x12, 0xDF, 0xBE, 0x25, 0x60, 0x95, 0x77, 0x8F, 
            0x6D, 0xA1, 0x1A, 0xA6, 0x1D, 0x76, 0x8E, 0x35, 0x57, 0x16, 0xD8, 0x71, 0x02, 0x03, 0x01, 0x00, 
            0x01, 0x02, 0x82, 0x01, 0x00, 0x7A, 0xEA, 0x59, 0xD5, 0x99, 0xAD, 0x8C, 0x96, 0x73, 0xD9, 0x0C, 
            0xB2, 0x40, 0x7F, 0x80, 0x8D, 0x9D, 0xC9, 0xFB, 0xC4, 0x84, 0x92, 0xC1, 0xDE, 0xC9, 0x4E, 0x42, 
            0x6D, 0xE8, 0x66, 0xFE, 0xCA, 0x36, 0xDB, 0xC7, 0x6E, 0xEC, 0x68, 0x60, 0x84, 0xF4, 0x42, 0x69, 
            0x55, 0x9F, 0xDF, 0xA0, 0x16, 0xED, 0xFB, 0x50, 0x1B, 0x04, 0xBA, 0x1E, 0x01, 0x95, 0xA2, 0x2B, 
            0xDD, 0xA3, 0x2D, 0x8A, 0x9A, 0x38, 0xB2, 0xB1, 0x0B, 0xE3, 0x89, 0x53, 0x04, 0x3E, 0xBA, 0x74, 
            0xAB, 0x07, 0x76, 0xDB, 0x7B, 0xD7, 0xC6, 0x6A, 0x04, 0x59, 0x56, 0x6A, 0x0F, 0x0F, 0xCF, 0x40, 
            0xDF, 0x25, 0xD5, 0x9F, 0x66, 0xDB, 0x5E, 0x85, 0x95, 0x0A, 0x88, 0xA2, 0xF0, 0x90, 0x01, 0x7D, 
            0xD3, 0x05, 0x41, 0x6A, 0x01, 0x19, 0x84, 0x83, 0x95, 0xC4, 0xD8, 0xD5, 0xD7, 0x05, 0x29, 0xF7, 
            0x16, 0x15, 0x4D, 0xCA, 0x63, 0x7B, 0xDD, 0x53, 0xC6, 0x99, 0x5B, 0xE9, 0x80, 0xA4, 0xEE, 0x27, 
            0x06, 0x7B, 0x81, 0x9B, 0xE6, 0x40, 0x68, 0xF8, 0xA4, 0x56, 0xEC, 0x7A, 0x61, 0xB8, 0x5F, 0xBB, 
            0x0E, 0x9A, 0x6A, 0xEE, 0xF7, 0x12, 0x39, 0xE1, 0xEB, 0x65, 0x53, 0x6C, 0xC3, 0xDE, 0xE5, 0x86, 
            0x10, 0x64, 0xC5, 0x58, 0xED, 0x3E, 0x21, 0xBC, 0x93, 0x40, 0xFE, 0xF1, 0x10, 0xE0, 0xB1, 0xFB, 
            0x1F, 0xDF, 0x7B, 0x86, 0xA7, 0x09, 0x19, 0xBA, 0xD5, 0x99, 0x24, 0xF4, 0x42, 0x9C, 0x27, 0x9A, 
            0xEE, 0x3E, 0x2A, 0xE4, 0x96, 0x29, 0xAE, 0x5B, 0x21, 0x63, 0x37, 0x6D, 0xD7, 0x96, 0xE3, 0xE9, 
            0x37, 0xCE, 0x99, 0xEA, 0xEE, 0x31, 0xF7, 0x4E, 0xBB, 0x4E, 0xA3, 0x7F, 0xE6, 0x11, 0x41, 0xFF, 
            0xD4, 0x84, 0xFE, 0xB7, 0xFF, 0x85, 0xD7, 0xC8, 0x7A, 0xF6, 0x96, 0x5B, 0xD9, 0x57, 0x58, 0x4B, 
            0xDB, 0x93, 0x59, 0xD7, 0x95, 0x02, 0x81, 0x81, 0x00, 0xFE, 0xB6, 0x5D, 0x55, 0x7B, 0x15, 0xEC, 
            0x34, 0xC8, 0xFB, 0xAE, 0x69, 0x36, 0x70, 0x0B, 0xCF, 0xED, 0x54, 0xDD, 0x0A, 0x8C, 0xF4, 0x88, 
            0x36, 0x6E, 0xF7, 0x52, 0xC7, 0x9F, 0xD0, 0xD7, 0x59, 0x87, 0xEA, 0x0F, 0x24, 0x4F, 0xDE, 0x4F, 
            0xA6, 0x8E, 0xF6, 0xC0, 0xE6, 0xE7, 0x1D, 0x5F, 0x77, 0x40, 0x2F, 0x4B, 0xA0, 0x76, 0x3B, 0x20, 
            0x23, 0x8E, 0xFB, 0x0B, 0x52, 0x9D, 0x0D, 0x84, 0x55, 0xB2, 0x12, 0xE1, 0x69, 0x5A, 0x73, 0x7B, 
            0x20, 0x29, 0x42, 0xE9, 0xE3, 0x41, 0x44, 0x44, 0x8D, 0xB8, 0x71, 0x8E, 0xBD, 0x0C, 0x23, 0xB7, 
            0x8E, 0xD9, 0x57, 0xE6, 0x78, 0x90, 0x57, 0xAC, 0x3D, 0x98, 0x30, 0x88, 0x99, 0x89, 0xCB, 0xE1, 
            0x86, 0x00, 0xA5, 0xEC, 0xBA, 0xB6, 0x2A, 0xA2, 0x59, 0x12, 0xEA, 0x9E, 0x0A, 0xB6, 0x29, 0x5A, 
            0x50, 0xCA, 0xF8, 0x71, 0xF6, 0x4B, 0x57, 0x54, 0x93, 0x02, 0x81, 0x81, 0x00, 0xE6, 0xFF, 0x5C, 
            0x58, 0x5C, 0x5B, 0xEE, 0x18, 0xED, 0xA8, 0xA6, 0x9A, 0x44, 0x0C, 0xDB, 0x74, 0x24, 0xDD, 0xF4, 
            0xB2, 0x46, 0x11, 0xF4, 0xDB, 0x7C, 0x80, 0xDC, 0x90, 0x6A, 0xD8, 0x41, 0xF1, 0x74, 0xEE, 0x2D, 
            0x12, 0xD4, 0xBF, 0x99, 0xD7, 0xAD, 0x38, 0xDE, 0xB6, 0x96, 0x22, 0x8D, 0xEE, 0xE8, 0xF6, 0x71, 
            0xB0, 0x87, 0xDB, 0xBE, 0xE3, 0x1A, 0x1C, 0x40, 0xB9, 0xF4, 0xB4, 0xF0, 0xE8, 0x76, 0x15, 0xF4, 
            0x9B, 0x04, 0x72, 0x62, 0x4B, 0xEC, 0x1D, 0x13, 0xDD, 0x97, 0x58, 0xF4, 0x8C, 0xD1, 0x5B, 0xE0, 
            0x2D, 0x9F, 0x25, 0xBF, 0x8B, 0xB8, 0x7A, 0x45, 0x38, 0x67, 0x40, 0xF7, 0x5A, 0x14, 0xB1, 0xA2, 
            0xE6, 0x44, 0xA3, 0xAA, 0xC7, 0xD8, 0x87, 0xAC, 0x7A, 0xEE, 0x5E, 0xDE, 0x9E, 0x13, 0xC0, 0x52, 
            0x3D, 0xE5, 0x60, 0xF5, 0x9E, 0x5C, 0x86, 0x13, 0xDC, 0xB5, 0xB5, 0xE5, 0x6B, 0x02, 0x81, 0x80, 
            0x01, 0xF9, 0x6F, 0xE7, 0xC5, 0xB8, 0x79, 0xC8, 0x3E, 0xF6, 0x94, 0x77, 0x84, 0x50, 0x82, 0x06, 
            0xEE, 0x94, 0x05, 0xD2, 0x9B, 0x1D, 0x1A, 0x21, 0x31, 0xE3, 0x00, 0xE5, 0x43, 0x3B, 0xDF, 0x2F, 
            0x76, 0x7A, 0x3D, 0xFB, 0xCE, 0x12, 0xAF, 0x13, 0x5F, 0x70, 0x52, 0x36, 0x77, 0xFC, 0x26, 0x4D, 
            0x4A, 0x56, 0x13, 0x83, 0xFE, 0xE6, 0x9E, 0x6D, 0x28, 0x22, 0x92, 0x07, 0xE5, 0xE7, 0xC0, 0xEA, 
            0xD9, 0x22, 0x84, 0x54, 0xC8, 0xBA, 0xB4, 0x6D, 0x9F, 0x64, 0x41, 0x63, 0xDD, 0x91, 0xA5, 0xE6, 
            0x63, 0x53, 0x9E, 0x03, 0xA1, 0x20, 0x75, 0xBF, 0xC9, 0xB7, 0x80, 0xB5, 0xD6, 0x88, 0x97, 0x71, 
            0x32, 0xC8, 0xCD, 0x86, 0x43, 0x27, 0x2D, 0x6C, 0x58, 0x7C, 0xF0, 0xC4, 0xD1, 0xBC, 0xAA, 0xDD, 
            0x7D, 0xE4, 0x0B, 0xAD, 0x91, 0x93, 0xE8, 0x7B, 0x4F, 0xD7, 0x75, 0x2A, 0xAF, 0x92, 0xD1, 0xB9, 
            0x02, 0x81, 0x80, 0x2D, 0xAE, 0xF8, 0xF3, 0x5C, 0xA8, 0xAD, 0xA8, 0xEE, 0x6F, 0x79, 0x2B, 0x6F, 
            0x23, 0xDF, 0xCE, 0xD3, 0x6F, 0xB5, 0xF1, 0xFF, 0xDB, 0x93, 0x42, 0x49, 0x18, 0x2F, 0x06, 0xBC, 
            0xAA, 0xB2, 0x37, 0xEF, 0x79, 0x1F, 0x1E, 0xE7, 0x46, 0x51, 0x45, 0x8F, 0x33, 0x7D, 0x10, 0x3D, 
            0x16, 0xEE, 0x5C, 0xFE, 0x63, 0xA6, 0xCE, 0x53, 0xC0, 0x08, 0xBB, 0x5F, 0x31, 0x91, 0x37, 0x75, 
            0x86, 0xC7, 0x52, 0x21, 0xF0, 0x6B, 0xA4, 0xB0, 0xB7, 0x72, 0x6B, 0x33, 0x71, 0xF8, 0xB8, 0xCD, 
            0x32, 0xC1, 0x82, 0x8B, 0xF1, 0x10, 0x9F, 0xD5, 0x26, 0xA1, 0x00, 0x1F, 0xE6, 0xC6, 0x83, 0xC6, 
            0x1F, 0xDA, 0x0B, 0x4D, 0xA6, 0x67, 0xE2, 0x04, 0x57, 0x1D, 0xF2, 0x52, 0x07, 0x5A, 0xFC, 0x20, 
            0xE2, 0x50, 0x42, 0x91, 0x03, 0x6B, 0x00, 0x64, 0xB9, 0xCD, 0x39, 0x99, 0x70, 0xC6, 0xC2, 0xD2, 
            0x88, 0xFB, 0xAB, 0x02, 0x81, 0x81, 0x00, 0xA3, 0x21, 0x1B, 0xA4, 0x7A, 0xD2, 0x3D, 0xA6, 0xCD, 
            0x56, 0x2D, 0x1B, 0x8B, 0x03, 0xA0, 0xE3, 0x12, 0xAE, 0x4B, 0x51, 0x3B, 0x58, 0xF1, 0x6C, 0x38, 
            0xEF, 0x4C, 0xCD, 0x5F, 0xD3, 0xE1, 0xB8, 0xCE, 0x52, 0x22, 0xE7, 0x71, 0x27, 0xF8, 0xA9, 0x9B, 
            0xF0, 0x9A, 0x6B, 0x24, 0xB7, 0x25, 0xAB, 0xCF, 0xEE, 0xC3, 0xFC, 0xBA, 0x0B, 0x48, 0x98, 0xD5, 
            0xD6, 0x42, 0xA7, 0x01, 0x21, 0xD8, 0x3E, 0xF7, 0xB8, 0x41, 0x1F, 0x0D, 0x88, 0xC1, 0xA2, 0x41, 
            0xF3, 0x2C, 0xFE, 0x7A, 0x99, 0x9B, 0x3A, 0x77, 0x9E, 0x27, 0xE9, 0x6C, 0x6B, 0x97, 0x80, 0x36, 
            0x1A, 0x9F, 0xE9, 0xBD, 0x1E, 0x62, 0xB5, 0xD6, 0xE5, 0x72, 0xDD, 0x92, 0x8D, 0x8B, 0xE4, 0x07, 
            0xF1, 0xF4, 0xC9, 0x6F, 0xB4, 0x11, 0x66, 0x4E, 0xC1, 0x4D, 0xA1, 0x3E, 0x26, 0x40, 0xFD, 0xD0, 
            0x6F, 0x46, 0x97, 0x11, 0x42, 0xDB, 0xA5
    };

    private static readonly long _storage;
    private static readonly RSA? _rsa;
    private const long _pepper = unchecked((long)0xC437910C05744775);

    static CryptoConstants()
    {
        EncryptedContainer container = new();
        var pointer = GCHandle.Alloc(container, GCHandleType.Pinned).AddrOfPinnedObject().ToInt64();
        _storage = pointer ^ _pepper;
        
        // Create RSA instance with private key for decryption
        try
        {
            _rsa = RSA.Create();
            _rsa.ImportRSAPrivateKey(_privateKeyBytes, out _);
        }
        catch
        {
            _rsa = null; // Graceful degradation
        }
    }

        public static double Pi
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.Pi, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant Pi: {ex.Message}", ex);
                }
            }
        }

        public static double E
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.E, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant E: {ex.Message}", ex);
                }
            }
        }

        public static double Sqrt2
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.Sqrt2, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant Sqrt2: {ex.Message}", ex);
                }
            }
        }

        public static double GoldenRatio
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.GoldenRatio, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToDouble(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant GoldenRatio: {ex.Message}", ex);
                }
            }
        }

        public static int MaxInt32
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.MaxInt32, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToInt32(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant MaxInt32: {ex.Message}", ex);
                }
            }
        }

        public static int Answer
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.Answer, RSAEncryptionPadding.Pkcs1);
                    return BitConverter.ToInt32(decryptedBytes, 0);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant Answer: {ex.Message}", ex);
                }
            }
        }

        public static decimal PiDecimal
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.PiDecimal, RSAEncryptionPadding.Pkcs1);
                    int[] bits = new int[4];
                    Buffer.BlockCopy(decryptedBytes, 0, bits, 0, 16);
                    return new decimal(bits);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant PiDecimal: {ex.Message}", ex);
                }
            }
        }

        public static decimal EDecimal
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.EDecimal, RSAEncryptionPadding.Pkcs1);
                    int[] bits = new int[4];
                    Buffer.BlockCopy(decryptedBytes, 0, bits, 0, 16);
                    return new decimal(bits);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant EDecimal: {ex.Message}", ex);
                }
            }
        }

        public static decimal OnePercent
        {
            get
            {
                if (_rsa == null)
                    throw new CryptographicException("RSA instance not available for decryption.");
                    
                try
                {
                    byte[] decryptedBytes = _rsa.Decrypt(EncryptedContainer.OnePercent, RSAEncryptionPadding.Pkcs1);
                    int[] bits = new int[4];
                    Buffer.BlockCopy(decryptedBytes, 0, bits, 0, 16);
                    return new decimal(bits);
                }
                catch (Exception ex)
                {
                    throw new CryptographicException($"Failed to decrypt constant OnePercent: {ex.Message}", ex);
                }
            }
        }

    /// <summary>
    /// One-way decryption: Constants can be decrypted at runtime but the process is irreversible.
    /// Values are encrypted at compile-time and can only be accessed through decryption.
    /// </summary>
    public static string GetSecurityInfo()
    {
        return $"Level 4 Security: One-way decryption with RSA-2048. " +
               $"Constants encrypted at compile-time, decryptable at runtime. " +
               $"Public key NOT stored (prevents re-encryption attacks). " +
               $"Private key size: {_privateKeyBytes.Length} bytes. " +
               $"Decryption is one-way only - values cannot be re-encrypted.";
    }
}